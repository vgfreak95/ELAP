from functools import partial


def set_generated_rules(el_world, el_set_rule):
    player = el_world.player
    fn = partial(el_set_rule, el_world)


    # Defined Macros for location access

    THREE_LEDGE = lambda state: state.has('Aptitude.double_jump', player) and state.has('silva', player) and state.has('champion', player)  
    TWO_LEDGE = lambda state: state.has('Aptitude.double_jump', player) and state.has('silva', player) or state.has('Aptitude.double_jump', player) and state.has('champion', player) or state.has('silva', player) and state.has('champion', player)  
    LEDGE = lambda state: state.has('Aptitude.double_jump', player) or state.has('silva', player) or state.has('champion', player)  
    TWO_HORIZONTAL = lambda state: state.has('Aptitude.Dodge', player) and state.has('sinner', player)  
    HORIZONTAL = lambda state: state.has('Aptitude.Dodge', player) or state.has('sinner', player)  
    FULLSILVA = lambda state: state.has('silva', player) and state.has('Aptitude.double_jump', player) and state.has('Aptitude.Dodge', player)  
    CHARGE = lambda state: state.has('Aptitude.dash_attack', player) and state.has('Aptitude.dash', player)  
    THREE_HEAL = lambda state: state.has('Passive.i_passive_heal_count_up_1', player) and state.has('Passive.i_passive_heal_count_up_2', player) and state.has('Passive.i_passive_heal_count_up_3', player)  
    

    
    # Events (rules for locations)

    fn("Swamp18Bottom", lambda state: state.has('Abyss01Top', player))
    fn("Abyss02Top", lambda state: state.has('Abyss01Bottom', player) or state.has('Abyss01Top', player) and state.has(CHARGE, player) and state.has('Aptitude.pound_attack', player) and state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) and (state.has('Aptitude.dash', player) or state.has(HORIZONTAL, player)) and (state.has('Aptitude.Hook', player) or state.has(FULLSILVA, player)) and state.has('Aptitude.dive', player))
    fn("Abyss03Left", lambda state: state.has('Abyss02Right', player) or state.has('Abyss02Top', player))
    fn("Abyss01Bottom", lambda state: state.has('Abyss02Top', player) or state.has('Abyss02Right', player))
    fn("Abyss02Right", lambda state: state.has('Abyss03Left', player))
    fn("Swamp12Bottom", lambda state: state.has('Abyss04Top', player))
    fn("Abyss05Top", lambda state: state.has('Abyss04Bottom', player) or state.has('Abyss04Top', player) and state.has('Passive.i_passive_ignore_damage_area', player) and state.has('Aptitude.dive', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.Hook', player) and state.has(THREE_HEAL, player) and state.has('Aptitude.dash', player))
    fn("Swamp12TP", lambda state: state.has('Abyss05Top', player))
    fn("Abyss04Bottom", lambda state: state.has('Abyss05Top', player))
    fn("Village11Right", lambda state: state.has('Castle01Left', player) or state.has('Castle_01_GAMEPLAY.BP_e2082_Dog', player))
    fn("Castle02Left2", lambda state: state.has('Castle01Right2', player) or state.has('Castle_01_GAMEPLAY.BP_e2082_Dog', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.wallgrab', player)))
    fn("Castle02Left1", lambda state: state.has('Castle01Right1', player) or state.has('Castle01Top', player))
    fn("Castle10Bottom", lambda state: state.has('Castle01Right1', player) and state.has('Aptitude.wallgrab', player))
    fn("Castle05Bottom", lambda state: state.has('Castle02Top', player) or state.has('Castle02Left2', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Castle01Right2", lambda state: state.has('Castle02Left2', player) or state.has('Castle02Left1', player) or state.has('Castle02Top', player) or state.has('Castle02Bottom', player))
    fn("Castle04Top", lambda state: state.has('Castle02Bottom', player) or state.has('Castle02Left2', player))
    fn("Castle01Right1", lambda state: state.has('Castle02Left1', player) or state.has('Castle02Left2', player) and (state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player)))
    fn("Castle05Top", lambda state: state.has('Castle03Bottom', player) or state.has('Castle03Top1', player) or state.has('Castle03Top2', player))
    fn("Castle11Bottom1", lambda state: state.has('Castle03Top1', player))
    fn("Castle11Bottom2", lambda state: state.has('Castle03Top2', player))
    fn("Castle02Bottom", lambda state: state.has('Castle04Top', player) or state.has('Castle_04_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Castle02Top", lambda state: state.has('Castle05Bottom', player) or state.has('Castle05Right', player) or state.has('Castle05Left', player) or state.has('Castle05Top', player))
    fn("Castle06Left", lambda state: state.has('Castle05Right', player) or state.has('Castle05Bottom', player))
    fn("Castle08Right", lambda state: state.has('Castle05Left', player) or state.has('Castle05Bottom', player))
    fn("Castle03Bottom", lambda state: state.has('Castle05Top', player))
    fn("Castle12Bottom", lambda state: state.has('Castle06Top', player) or state.has('Castle06Right', player))
    fn("Castle07Left", lambda state: state.has('Castle06Right', player) or state.has('Castle06Top', player) or state.has('Castle06Left', player))
    fn("Castle05Right", lambda state: state.has('Castle06Left', player) or state.has('Castle06Top', player))
    fn("Fort01Left1", lambda state: state.has('Castle07Right', player) or state.has('Castle_07_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has('Aptitude.Hook', player) or state.has(THREE_LEDGE, player)))
    fn("Castle06Right", lambda state: state.has('Castle07Left', player) or state.has('Castle_07_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle05Left", lambda state: state.has('Castle08Right', player) or state.has('Castle08Top', player))
    fn("Castle09Bottom", lambda state: state.has('Castle08Top', player) or state.has('Castle08Right', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Castle11Left", lambda state: state.has('Castle09Right', player) or state.has('Castle09Bottom', player))
    fn("Castle08Top", lambda state: state.has('Castle09Bottom', player) or state.has('Castle09Right', player) or state.has('Castle09Left', player))
    fn("Castle10Right", lambda state: state.has('Castle09Left', player) or state.has('Castle09Bottom', player))
    fn("Castle09Left", lambda state: state.has('Castle_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle01Top", lambda state: state.has('Castle_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle12Left", lambda state: state.has('Castle11Right', player) or state.has('Castle11Bottom2', player))
    fn("Castle09Right", lambda state: state.has('Castle11Left', player) or state.has('Castle11Bottom1', player))
    fn("Castle13Bottom", lambda state: state.has('Castle11Top', player) or state.has('Castle11Left', player) and state.has('Castle11Right', player))
    fn("Castle03Top1", lambda state: state.has('Castle11Bottom1', player) or state.has('Castle11Left', player))
    fn("Castle03Top2", lambda state: state.has('Castle11Bottom2', player) or state.has('Castle11Right', player))
    fn("Castle06Top", lambda state: state.has('Castle12Bottom', player) or state.has('Castle12Left', player) and (state.has('Aptitude.Hook', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player)) or state.has('Aptitude.pound_attack', player)))
    fn("Castle11Right", lambda state: state.has('Castle12Left', player) or state.has('Castle12Bottom', player))
    fn("Castle21Left", lambda state: state.has('Castle12Right', player) or state.has('Castle12Bottom', player) and state.has('Aptitude.door_unlock', player))
    fn("Castle17Right", lambda state: state.has('Castle13Left', player) or state.has('Castle13Bottom', player))
    fn("Castle11Top", lambda state: state.has('Castle13Bottom', player) or state.has('Castle13Left', player) or state.has('Castle13Right', player))
    fn("Castle14Left", lambda state: state.has('Castle13Right', player) or state.has('Castle13Bottom', player))
    fn("Castle13Right", lambda state: state.has('Castle14Left', player) or state.has('Castle14Top', player))
    fn("Castle15Bottom", lambda state: state.has('Castle14Top', player) or state.has('Castle14Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Castle16Right", lambda state: state.has('Castle_15_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.wallgrab', player) and (state.has('Aptitude.Hook', player) or state.has(FULLSILVA, player) and state.has('sinner', player) or state.has(THREE_LEDGE, player)))
    fn("Castle14Top", lambda state: state.has('Castle15Bottom', player) or state.has('Castle_15_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle18Bottom", lambda state: state.has('Castle17Top', player) or state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle15Left", lambda state: state.has('Castle16Right', player) or state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player) and (state.has('silva', player) and state.has('Aptitude.double_jump', player) or state.has('Aptitude.double_jump', player) and state.has('champion', player) or state.has('Aptitude.wallgrab', player)))
    fn("Castle13Left", lambda state: state.has('Castle17Right', player))
    fn("Castle18Top", lambda state: state.has('Castle17Right', player) and state.has(LEDGE, player))
    fn("Castle19Left", lambda state: state.has('Castle18Right', player) or state.has('Castle18Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) and state.has(LEDGE, player)))
    fn("Castle17Top", lambda state: state.has('Castle18Right', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) and state.has(LEDGE, player)) or state.has('Castle18Top', player))
    fn("Castle20Left", lambda state: state.has('Castle_19_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle18Right", lambda state: state.has('Castle_19_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle19Right", lambda state: state.has('Castle_20_GAMEPLAY.BP_e5030_Leader', player))
    fn("Castle12Right", lambda state: state.has('Castle21Left', player))
    fn("Cave02Top", lambda state: state.has('Cave_01_GAMEPLAY.BP_Interactable_Passive_Parry_2', player))
    fn("Village12Right", lambda state: state.has('Cave_01_GAMEPLAY.BP_Interactable_Passive_Parry_2', player))
    fn("Cave05Left", lambda state: state.has('Cave02Right', player) or state.has('Cave02Bottom', player) or state.has('Cave02Top', player))
    fn("Cave07Top", lambda state: state.has('Cave02Bottom', player) or state.has('Cave02Right', player) and state.has('Aptitude.pound_attack', player))
    fn("Cave01Bottom", lambda state: state.has('Cave02Right', player) and state.has('Aptitude.wallgrab', player) and (state.has(FULLSILVA, player) and state.has('Aptitude.dash', player) or state.has(THREE_LEDGE, player) or state.has(TWO_LEDGE, player) and state.has(TWO_HORIZONTAL, player) or state.has('silva', player) and state.has(TWO_HORIZONTAL, player) or state.has('silva', player) and state.has('sinner', player) and state.has('Aptitude.double_jump', player) or state.has('Aptitude.dash', player) and state.has('Aptitude.double_jump', player) and state.has('champion', player) and state.has('sinner', player)))
    fn("Cave07Right", lambda state: state.has('Cave03Left', player))
    fn("Cave08Left", lambda state: state.has('Cave03Right', player))
    fn("Cave06Bottom", lambda state: state.has('Cave_03_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Cave16Left", lambda state: state.has('Cave04Right', player) or state.has('Cave04Bottom', player))
    fn("Cave05Top", lambda state: state.has('Cave04Bottom', player) or state.has('Cave04Right', player))
    fn("Cave12Right", lambda state: state.has('Cave04Left', player) or state.has('Cave04Bottom', player) and state.has('Aptitude.door_unlock', player))
    fn("Cave02Right", lambda state: state.has('Cave05Left', player) or state.has('Cave05Bottom', player))
    fn("Cave04Bottom", lambda state: state.has('Cave05Top', player) or state.has('Cave05Bottom', player))
    fn("Cave06Top", lambda state: state.has('Cave05Bottom', player) or state.has('Cave05Left', player) or state.has('Cave05Right', player) or state.has('Cave05Top', player))
    fn("Cave10Left", lambda state: state.has('Cave05Right', player) or state.has('Cave05Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has(TWO_LEDGE, player) or state.has(TWO_HORIZONTAL, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave05Bottom", lambda state: state.has('Cave06Top', player) or state.has('Cave06Bottom', player))
    fn("Cave03Top", lambda state: state.has('Cave06Bottom', player) or state.has('Cave06Top', player))
    fn("Cave02Bottom", lambda state: True)
    fn("Cave03Left", lambda state: state.has('Cave_07_GAMEPLAY.BP_e2162_Spider', player))
    fn("Cave09Bottom", lambda state: state.has('Cave08Top', player) or state.has('Cave08Left', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has('Aptitude.dash', player) or state.has(HORIZONTAL, player)))
    fn("Cave03Right", lambda state: state.has('Cave08Left', player) or state.has('Cave08Top', player) or state.has('Cave08Right', player))
    fn("Cave17Top", lambda state: state.has('Cave08Bottom', player) or state.has('Cave08Left', player) and state.has('Aptitude.dive', player) and state.has('Aptitude.pound_attack', player))
    fn("Cave11Left", lambda state: state.has('Cave08Right', player) or state.has('Cave08Left', player))
    fn("Cave10Bottom", lambda state: state.has('Cave09Top', player) or state.has('Cave09Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Cave08Top", lambda state: state.has('Cave09Bottom', player) or state.has('Cave09Top', player) or state.has('Cave09Right', player))
    fn("Cave21Left", lambda state: state.has('Cave09Right', player) or state.has('Cave09Top', player) and (state.has('sinner', player) or state.has('Aptitude.Dodge', player) and (state.has(LEDGE, player) or state.has('Aptitude.dash', player) and state.has('Aptitude.wallgrab', player)) or state.has('Aptitude.double_jump', player) and (state.has('champion', player) or state.has('silva', player) or state.has('Aptitude.dash', player)) or state.has('Aptitude.wallgrab', player) and state.has('champion', player)))
    fn("Cave23Left", lambda state: state.has('Cave10Right', player) or state.has('Cave10Bottom', player))
    fn("Cave05Right", lambda state: state.has('Cave10Left', player) or state.has('Cave10Bottom', player) and (state.has('Aptitude.Hook', player) or state.has(TWO_LEDGE, player) or state.has(TWO_HORIZONTAL, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave09Top", lambda state: state.has('Cave10Bottom', player) or state.has('Cave10Right', player) or state.has('Cave10Top', player) or state.has('Cave10Left', player))
    fn("Cave16Bottom", lambda state: state.has('Cave10Top', player) or state.has('Cave10Bottom', player))
    fn("Cave08Right", lambda state: state.has('Cave11Left', player) or state.has('Cave_11_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has('Aptitude.Hook', player) or state.has(HORIZONTAL, player) or state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Cave13Bottom", lambda state: state.has('Cave_11_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.wallgrab', player))
    fn("Cave18Left2", lambda state: state.has('Cave11Right1', player) or state.has('Cave_11_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and (state.has(LEDGE, player) or state.has('sinner', player) or state.has('Aptitude.Dodge', player) and state.has('Aptitude.dash', player)) or state.has(TWO_LEDGE, player) or state.has(TWO_HORIZONTAL, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave04Left", lambda state: state.has('Cave12Right', player))
    fn("Cave11Top", lambda state: state.has('Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Cave14Bottom", lambda state: state.has('Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Cave23Right", lambda state: state.has('Cave13Left', player) or state.has('Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has('Aptitude.wallgrab', player) or state.has(TWO_LEDGE, player) or state.has('sinner', player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave20Left", lambda state: state.has('Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Cave13Top", lambda state: state.has('Cave14Bottom', player) or state.has('Cave14Right', player) or state.has('Cave14Left', player))
    fn("Cave15Right", lambda state: state.has('Cave14Left', player) or state.has('Cave14Bottom', player) and state.has(LEDGE, player))
    fn("Cave22Left", lambda state: state.has('Cave14Right', player) or state.has('Cave14Bottom', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave14Left", lambda state: state.has('Cave15Right', player) or state.has('Cave15Left', player) and state.has('Aptitude.dive', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Cave16Right", lambda state: state.has('Cave15Left', player) or state.has('Cave15Right', player))
    fn("Cave15Left", lambda state: state.has('Cave16Right', player) or state.has('Cave_16_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Cave10Top", lambda state: state.has('Cave16Bottom', player))
    fn("Cave04Right", lambda state: state.has('Cave16Left', player) or state.has('Cave_16_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Cave08Bottom", lambda state: state.has('Cave17Top', player))
    fn("Cave11Right1", lambda state: state.has('Cave18Left1', player))
    fn("Cave11Right2", lambda state: state.has('Cave18Left1', player) and state.has('Aptitude.dive', player))
    fn("Cave20Bottom", lambda state: state.has('Cave19Top', player) or state.has('Cave_19_GAMEPLAY.BP_e2022_Soldier', player))
    fn("Cave21Right", lambda state: state.has('Cave19Left', player) or state.has('Cave19Top', player) and (state.has(HORIZONTAL, player) and state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has(TWO_LEDGE, player)))
    fn("Cave22Bottom", lambda state: state.has('Cave20Top', player) or state.has('Cave20Bottom', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Cave19Top", lambda state: state.has('Cave20Bottom', player) or state.has('Cave20Left', player) or state.has('Cave20Top', player))
    fn("Cave13Right", lambda state: state.has('Cave20Left', player) or state.has('Cave20Bottom', player) or state.has('Cave20Top', player))
    fn("Cave09Right", lambda state: state.has('Cave21Left', player) or state.has('Cave21Right', player))
    fn("Cave19Left", lambda state: state.has('Cave21Right', player) or state.has('Cave21Left', player))
    fn("Fort02Left", lambda state: state.has('Cave22Right', player) or state.has('Cave22Bottom', player))
    fn("Cave14Right", lambda state: state.has('Cave22Left', player) or state.has('Cave22Bottom', player) and (state.has(TWO_LEDGE, player) or state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Cave20Top", lambda state: state.has('Cave22Bottom', player) or state.has('Cave22Right', player) or state.has('Cave22Left', player))
    fn("Cave13Left", lambda state: state.has('Cave_23_GAMEPLAY.BP_e5021_OlderSister', player))
    fn("Cave10Right", lambda state: state.has('Cave_23_GAMEPLAY.BP_e5021_OlderSister', player))
    fn("Church02Top", lambda state: state.has('Church01Bottom', player) or state.has('Church01Left', player) or state.has('Church01Top', player))
    fn("Church12Right", lambda state: state.has('Church01Left', player) or state.has('Church01Bottom', player) or state.has('Church01Top', player))
    fn("Church01Bottom", lambda state: state.has('Church02Top', player) or state.has('Church02Right', player) and (state.has('Aptitude.double_jump', player) or state.has('champion', player) or state.has('silva', player) and state.has('Aptitude.Dodge', player)))
    fn("Church10Left", lambda state: state.has('Church02Right', player) or state.has('Church02Top', player))
    fn("Church05Right", lambda state: state.has('Church03Left', player) or state.has('Church03Right', player))
    fn("Church04Left", lambda state: state.has('Church03Right', player) or state.has('Church03Left', player))
    fn("Church03Right", lambda state: state.has('Church04Left', player) or state.has('Church_04_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Church06Left", lambda state: state.has('Church04Right', player) or state.has('Church_04_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Church11Top", lambda state: state.has('CathedralCloister', player))
    fn("Church03Left", lambda state: state.has('CathedralCloister', player))
    fn("Church09Bottom", lambda state: state.has('CathedralCloister', player) and state.has('Aptitude.wallgrab', player))
    fn("Church04Right", lambda state: state.has('Church06Left', player) or state.has('Church06Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Church07Left", lambda state: state.has('Church06Right', player) or state.has('Church06Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Church06Right", lambda state: state.has('Church07Left', player) or state.has('Church_07_GAMEPLAY.BP_e2012_Slime_Unique', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Church08Left", lambda state: state.has('Church07Right', player) or state.has('Church07Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)) or state.has('Church_07_GAMEPLAY.BP_e2012_Slime_Unique', player))
    fn("Village01Bottom", lambda state: state.has('Church_08_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest01Top", lambda state: state.has('Church_08_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Church07Right", lambda state: state.has('Church_08_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Church05Top", lambda state: state.has('Church09Bottom', player) or state.has('Church09Top', player))
    fn("Church01Top", lambda state: state.has('Church_09_GAMEPLAY.BP_e2092_Priest', player))
    fn("Church14Bottom", lambda state: state.has('Church09Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Church02Right", lambda state: state.has('Church10Left', player) or state.has('Church_10_GAMEPLAY.BP_Interactable_Item_Tip_2', player))
    fn("Church11Left", lambda state: state.has('Church10Right', player) or state.has('Church_10_GAMEPLAY.BP_Interactable_Item_Tip_2', player))
    fn("Church05Bottom", lambda state: state.has('Church11Top', player) or state.has('Church11Left', player))
    fn("Church10Right", lambda state: state.has('Church11Left', player))
    fn("Church01Left", lambda state: state.has('Church12Right', player) or state.has('Church_12_GAMEPLAY.BP_Interactable_Item_Tip1', player))
    fn("Church13Top", lambda state: state.has('Church12Bottom', player) or state.has('Church_12_GAMEPLAY.BP_Interactable_Item_Tip1', player) and (state.has('Aptitude.door_unlock', player) and (state.has('Aptitude.double_jump', player) or state.has('champion', player) or state.has('silva', player) and state.has('Aptitude.Dodge', player) or state.has('Aptitude.wallgrab', player))))
    fn("Church12Bottom", lambda state: state.has('Church13Top', player))
    fn("Church09Top", lambda state: state.has('Church14Bottom', player))
    fn("Church08Bottom", lambda state: state.has('Forest01Top', player) or state.has('Forest01Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest02Left", lambda state: state.has('Forest01Right', player) or state.has('Forest01Top', player))
    fn("Forest01Right", lambda state: state.has('Forest02Left', player) or state.has('Forest02Right1', player))
    fn("Forest04Left", lambda state: state.has('Forest02Right1', player) or state.has('Forest02Left', player) or state.has('Forest02Right2', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Forest03Left", lambda state: state.has('Forest02Right2', player) or state.has('Forest02Left', player))
    fn("Forest05Left", lambda state: state.has('Forest03Right', player) or state.has('Forest03Left', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Forest02Right2", lambda state: state.has('Forest03Left', player) or state.has('Forest03Right', player))
    fn("Forest05Top", lambda state: state.has('Forest04Right', player) or state.has('Forest04Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has(HORIZONTAL, player) and state.has('Aptitude.dive', player)))
    fn("Forest02Right1", lambda state: state.has('Forest04Left', player) or state.has('Forest04Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest07Left", lambda state: state.has('Forest05Right', player) or state.has('Forest_05_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Forest03Right", lambda state: state.has('Forest05Left', player) or state.has('Forest_05_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Forest04Right", lambda state: state.has('Forest05Top', player) or state.has('Forest_05_GAMEPLAY.BP_Interactable_Item_Tip4', player) and state.has(LEDGE, player))
    fn("Forest07Top", lambda state: state.has('Forest06Bottom', player))
    fn("Oubliette01Left", lambda state: state.has('Forest07Right', player) or state.has('Forest07Left', player) and (state.has('Aptitude.Dodge', player) and (state.has(LEDGE, player) or state.has('Aptitude.dash', player)) or state.has(TWO_LEDGE, player) or state.has('Aptitude.Hook', player) or state.has('sinner', player) or state.has('Aptitude.double_jump', player) and state.has('Aptitude.dash', player)))
    fn("Forest08Top", lambda state: state.has('Forest07Bottom', player) or state.has('Forest07Left', player))
    fn("Forest05Right", lambda state: state.has('Forest07Left', player) or state.has('Forest07Bottom', player) and state.has(LEDGE, player) or state.has('Forest07Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Forest06Bottom", lambda state: state.has('Forest07Top', player) or state.has('Forest07Left', player) and state.has(LEDGE, player))
    fn("Forest07Bottom", lambda state: state.has('Forest08Top', player) or state.has('Forest08Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest10Left", lambda state: state.has('Forest08Right', player) or state.has('Forest08Top', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest10Bottom1", lambda state: state.has('Forest09Top', player) or state.has('Forest09Left', player) and state.has('Aptitude.dive', player))
    fn("Swamp2Top", lambda state: state.has('Forest09Left', player) or state.has('Forest09Top', player) and state.has('Aptitude.dive', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest11Top", lambda state: state.has('Forest10Bottom2', player) or state.has('Forest_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest09Top", lambda state: state.has('Forest10Bottom1', player) or state.has('Forest_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest08Right", lambda state: state.has('Forest10Left', player) or state.has('Forest_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest12Left", lambda state: state.has('Forest10Right', player) or state.has('Forest_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest10Bottom2", lambda state: state.has('Forest11Top', player) or state.has('Forest11Right', player))
    fn("Forest14Left", lambda state: state.has('Forest11Right', player) or state.has('Forest11Top', player) and state.has('Aptitude.dive', player))
    fn("Forest10Right", lambda state: state.has('Forest12Left', player) or state.has('Forest12Bottom', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Forest13Top", lambda state: state.has('Forest12Bottom', player) or state.has('Forest12Right', player) or state.has('Forest12Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Forest17Left", lambda state: state.has('Forest12Right', player) or state.has('Forest12Left', player) and (state.has('Aptitude.wallgrab', player) and (state.has('Aptitude.double_jump', player) or state.has('champion', player)) or state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player) and (state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)) or state.has('silva', player) and state.has('Aptitude.double_jump', player) or state.has(LEDGE, player) and state.has('sinner', player) or state.has(TWO_LEDGE, player) and state.has(HORIZONTAL, player)) or state.has('Forest12Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Forest12Bottom", lambda state: state.has('Forest13Top', player) or state.has('Forest13Bottom', player))
    fn("Forest14Top", lambda state: state.has('Forest13Bottom', player) or state.has('Forest13Top', player))
    fn("Forest16Left", lambda state: state.has('Forest13Right', player) or state.has('Forest13Top', player) and state.has('Aptitude.wallgrab', player) and state.has('Aptitude.door_unlock', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_LEDGE, player)))
    fn("Forest15Top", lambda state: state.has('Forest_14_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest13Bottom", lambda state: state.has('Forest_14_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Forest11Right", lambda state: state.has('Forest14Left', player) or state.has('Forest_14_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.dive', player))
    fn("Forest14Bottom", lambda state: state.has('Forest15Top', player))
    fn("Forest13Right", lambda state: state.has('Forest16Left', player))
    fn("Forest12Right", lambda state: state.has('Forest17Left', player))
    fn("Fort03Left1", lambda state: state.has('Fort01Right', player) or state.has('Fort01Left1', player) or state.has('Fort01Left2', player))
    fn("Village15Right", lambda state: state.has('Fort01Left2', player) or state.has('Fort01Right', player) and state.has('Aptitude.dive', player))
    fn("Castle07Right", lambda state: state.has('Fort01Left1', player) or state.has('Fort_01_GAMEPLAY.BP_e2192_Gargoyle', player) and state.has('Aptitude.Hook', player))
    fn("Fort03Left2", lambda state: state.has('Fort02Right', player) or state.has('Fort02Left', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_HORIZONTAL, player) or state.has('Aptitude.double_jump', player) and (state.has('silva', player) or state.has('champion', player))))
    fn("Cave22Right", lambda state: state.has('Fort02Left', player) or state.has('Fort02Right', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_HORIZONTAL, player) or state.has(TWO_LEDGE, player) or state.has('sinner', player) or state.has('Aptitude.dash', player) and state.has(LEDGE, player) or state.has('Aptitude.dash', player) and state.has('Aptitude.Dodge', player)))
    fn("Fort04Left", lambda state: state.has('Fort_03_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Fort01Right", lambda state: state.has('Fort_03_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player)))
    fn("Fort02Right", lambda state: state.has('Fort_03_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Fort05Bottom1", lambda state: state.has('Fort_03_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player)))
    fn("Fort05Bottom2", lambda state: state.has('Fort04Top', player) or state.has('Fort04Left', player) and state.has(LEDGE, player))
    fn("Fort03Right", lambda state: state.has('Fort04Left', player) or state.has('Fort04Top', player))
    fn("Fort04Top", lambda state: state.has('Fort05Bottom2', player) or state.has('Fort05Right', player))
    fn("Fort06Left", lambda state: state.has('Fort05Right', player) or state.has('Fort05Bottom2', player) and state.has(LEDGE, player))
    fn("Fort03Top", lambda state: state.has('Fort05Bottom1', player) or state.has('Fort05Bottom2', player) and state.has(LEDGE, player))
    fn("Fort15Bottom", lambda state: state.has('Fort05Bottom2', player) and state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player))
    fn("Fort05Right", lambda state: state.has('Fort06Left', player) or state.has('Fort06Bottom', player) or state.has('Fort06Right', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Fort07Left", lambda state: state.has('Fort06Right', player) or state.has('Fort06Left', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Fort10Top", lambda state: state.has('Fort06Bottom', player) or state.has('Fort06Left', player) or state.has('Fort06Right', player))
    fn("Fort09Top1", lambda state: state.has('Fort07Right', player) or state.has('Fort07Bottom1', player) or state.has('Fort07Top', player) or state.has('Fort07Bottom2', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort08Left", lambda state: state.has('Fort07Right', player) or state.has('Fort07Top', player))
    fn("Fort06Right", lambda state: state.has('Fort07Left', player) or state.has('Fort07Top', player) and state.has(LEDGE, player))
    fn("Fort11Bottom", lambda state: state.has('Fort07Top', player) or state.has('Fort07Bottom1', player) or state.has('Fort07Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)) or state.has('Fort07Right', player))
    fn("Fort09Top2", lambda state: state.has('Fort07Bottom2', player) or state.has('Fort07Bottom1', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort07Right", lambda state: state.has('Fort08Left', player) or state.has('Fort_08_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Outside03Top", lambda state: state.has('Fort09Right', player) or state.has('Fort09Top1', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort10Right", lambda state: state.has('Fort09Left', player) or state.has('Fort09Right', player) or state.has('Fort09Top1', player) or state.has('Fort09Top2', player))
    fn("Fort07Bottom1", lambda state: state.has('Fort09Top1', player) or state.has('Fort09Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Fort07Bottom2", lambda state: state.has('Fort09Top2', player) or state.has('Fort09Right', player) and state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player))
    fn("Fort09Left", lambda state: state.has('Fort_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Fort06Bottom", lambda state: state.has('Fort_10_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player))
    fn("Fort07Top", lambda state: state.has('Fort11Bottom', player) or state.has('Fort11Left', player) or state.has('Fort11Top1', player) or state.has('Fort11Top2', player) or state.has('Fort11Top2', player))
    fn("Fort12Right", lambda state: state.has('Fort11Left', player) or state.has('Fort11Bottom', player) and state.has(LEDGE, player) or state.has('Fort11Top1', player) and (state.has(HORIZONTAL, player) or state.has(LEDGE, player) or state.has('Aptitude.dash', player)))
    fn("Fort13Bottom1", lambda state: state.has('Fort11Top1', player) or state.has('Fort11Left', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Fort13Bottom2", lambda state: state.has('Fort11Top2', player) and state.has('Aptitude.wallgrab', player) or state.has('Fort_11_GAMEPLAY.BP_SCR_LV1M_2190_4', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort11Left", lambda state: state.has('Fort12Right', player) or state.has('Fort12Left', player))
    fn("Fort14Bottom", lambda state: state.has('Fort12Top', player) and state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player))
    fn("Fort16Right", lambda state: state.has('Fort12Left', player) or state.has('Fort12Right', player) or state.has('Fort12Top', player))
    fn("Fort11Top1", lambda state: state.has('Fort13Bottom1', player) or state.has('Fort13Bottom2', player) or state.has('Fort13Left', player) or state.has('Fort13Top', player))
    fn("Fort11Top2", lambda state: state.has('Fort13Bottom2', player) or state.has('Fort13Top', player) or state.has('Fort13Bottom1', player))
    fn("Fort14Right", lambda state: state.has('Fort13Left', player) or state.has('Fort13Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Fort19Bottom", lambda state: state.has('Fort13Top', player) and state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player) or state.has('Fort13Bottom1', player) and state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player))
    fn("Fort15Right1", lambda state: state.has('Fort14Left', player) or state.has('Fort14Right', player) and (state.has('Aptitude.dash', player) or state.has(HORIZONTAL, player) or state.has(LEDGE, player)))
    fn("Fort13Left", lambda state: state.has('Fort14Right', player) or state.has('Fort14Left', player) or state.has('Fort14Bottom', player))
    fn("Fort12Top", lambda state: state.has('Fort14Bottom', player) or state.has('Fort14Right', player) or state.has('Fort14Left', player))
    fn("Fort16Left1", lambda state: state.has('Fort15Right2', player) or state.has('Fort15Right1', player) or state.has('Fort15Top', player) or state.has('Fort15Bottom', player) and state.has(LEDGE, player))
    fn("Fort14Left", lambda state: state.has('Fort15Right1', player) or state.has('Fort15Right2', player) and state.has(LEDGE, player))
    fn("Fort05Top", lambda state: state.has('Fort15Bottom', player) or state.has('Fort15Top', player))
    fn("Fort17Bottom", lambda state: state.has('Fort15Top', player) or state.has('Fort15Right3', player) and state.has(LEDGE, player))
    fn("Fort16Left2", lambda state: state.has('Fort15Right3', player) or state.has('Fort15Bottom', player) and state.has(LEDGE, player) or state.has('Fort15Right2', player))
    fn("Fort15Right2", lambda state: state.has('Fort16Left1', player))
    fn("Fort18Bottom", lambda state: state.has('Fort16Top', player))
    fn("Fort15Right3", lambda state: state.has('Fort16Left2', player))
    fn("Fort12Left", lambda state: state.has('Fort16Right', player))
    fn("Fort15Top", lambda state: state.has('Fort17Bottom', player))
    fn("Fort18Left", lambda state: state.has('Fort17Right', player) or state.has('Fort17Bottom', player))
    fn("Fort17Right", lambda state: state.has('Fort18Left', player) or state.has('Fort18Right', player))
    fn("Fort19Left", lambda state: state.has('Fort18Right', player) or state.has('Fort18Left', player) or state.has('Fort18Bottom', player))
    fn("Fort16Top", lambda state: state.has('Fort18Bottom', player) or state.has('Fort18Right', player))
    fn("Fort18Right", lambda state: state.has('Fort19Left', player) or state.has('Fort19Top', player) and state.has(LEDGE, player))
    fn("Fort20Bottom", lambda state: state.has('Fort19Top', player) or state.has('Fort19Left', player) and state.has(LEDGE, player))
    fn("Fort13Top", lambda state: state.has('Fort19Bottom', player) or state.has('Fort19Top', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort19Top", lambda state: state.has('Fort20Bottom', player) or state.has('MourningHall', player))
    fn("Fort21Bottom", lambda state: state.has('Fort20Top', player) or state.has('MourningHall', player))
    fn("Fort20Top", lambda state: state.has('Fort21Bottom', player))
    fn("Forest07Right", lambda state: state.has('Oubliette01Left', player) or state.has('Oubliette01Right', player) and state.has('Aptitude.dive', player))
    fn("Oubliette02Left", lambda state: state.has('Oubliette01Right', player) or state.has('Oubliette01Left', player) and state.has('Aptitude.dive', player))
    fn("Oubliette01Right", lambda state: state.has('Oubliette02Left', player) or state.has('Oubliette_02_GAMEPLAY.BP_Interactable_Item_Tip3', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Oubliette05Left", lambda state: state.has('Oubliette02Right1', player) or state.has('Oubliette_02_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette04Left", lambda state: state.has('Oubliette02Right2', player) or state.has('Oubliette_02_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette04Right", lambda state: state.has('Oubliette03Left', player) or state.has('Oubliette03Right', player) and state.has('Aptitude.dive', player))
    fn("Oubliette10Left1", lambda state: state.has('Oubliette03Right', player) or state.has('Oubliette03Left', player) and state.has('Aptitude.dive', player) or state.has('Oubliette03Top', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has('Aptitude.dive', player)))
    fn("Oubliette05Bottom3", lambda state: state.has('Oubliette03Top', player) or state.has('Oubliette03Right', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette03Left", lambda state: state.has('Oubliette04Right', player) or state.has('Oubliette04Left', player))
    fn("Oubliette02Right2", lambda state: state.has('Oubliette04Right', player) or state.has('Oubliette04Left', player))
    fn("Oubliette05Top1", lambda state: state.has('Oubliette051Bottom', player))
    fn("Oubliette05Top2", lambda state: state.has('Oubliette052Bottom1', player) or state.has('Oubliette052Bottom2', player))
    fn("Oubliette05Top4", lambda state: state.has('Oubliette052Bottom2', player) or state.has('Oubliette052Bottom1', player) and (state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) and state.has('Aptitude.Hook', player)))
    fn("Oubliette05Bottom2", lambda state: state.has('Oubliette053Top', player))
    fn("Oubliette052Bottom1", lambda state: state.has('Oubliette05Top2', player) or state.has('Oubliette05Top1', player))
    fn("Oubliette053Top", lambda state: state.has('Oubliette05Bottom2', player) or state.has('Oubliette05Left', player))
    fn("Oubliette072Bottom", lambda state: state.has('Oubliette05Top3', player) or state.has('Oubliette05Top1', player))
    fn("Oubliette051Bottom", lambda state: state.has('Oubliette05Top1', player) or state.has('Oubliette05Left', player) and state.has(LEDGE, player))
    fn("Oubliette071Top", lambda state: state.has('Oubliette05Bottom1', player) or state.has('Oubliette05Left', player))
    fn("Oubliette02Right1", lambda state: state.has('Oubliette05Left', player) or state.has('Oubliette05Right', player) or state.has('Oubliette05Top1', player))
    fn("Oubliette06Left", lambda state: state.has('Oubliette05Right', player))
    fn("Oubliette03Top", lambda state: state.has('Oubliette05Bottom3', player) or state.has('Oubliette05Left', player))
    fn("Oubliette052Bottom2", lambda state: state.has('Oubliette05Top4', player))
    fn("Oubliette07Right1", lambda state: state.has('Oubliette061Left', player) or state.has('Oubliette_06_1_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette07Bottom2", lambda state: state.has('Oubliette062Bottom2', player))
    fn("Oubliette07Left1", lambda state: state.has('Oubliette063Left1', player))
    fn("Oubliette07Top", lambda state: state.has('Oubliette064Top', player))
    fn("Oubliette05Right", lambda state: state.has('Oubliette06Left', player) or state.has('Oubliette06Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette07Left2", lambda state: state.has('Oubliette06Right', player) or state.has('Oubliette06Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette10Top", lambda state: state.has('Oubliette06Bottom', player) or state.has('Oubliette06Right', player) or state.has('Oubliette06Left', player))
    fn("Oubliette05Bottom1", lambda state: state.has('Oubliette071Top', player))
    fn("Oubliette05Top3", lambda state: state.has('Oubliette072Bottom', player))
    fn("Oubliette061Left", lambda state: state.has('Oubliette07Right1', player) or state.has('Oubliette07Bottom1', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player)))
    fn("Oubliette063Left1", lambda state: state.has('Oubliette07Left1', player) or state.has('Oubliette07Bottom1', player) and (state.has('Aptitude.Hook', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)) or state.has('silva', player) and state.has('Aptitude.double_jump', player)))
    fn("Oubliette062Bottom2", lambda state: state.has('Oubliette07Bottom2', player) or state.has('Oubliette07Bottom1', player))
    fn("Oubliette064Top", lambda state: state.has('Oubliette07Top', player) or state.has('Oubliette07Left1', player) and state.has('Aptitude.door_unlock', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and (state.has(THREE_LEDGE, player) or state.has(FULLSILVA, player))))
    fn("Oubliette06Right", lambda state: state.has('Oubliette07Left2', player))
    fn("Oubliette13Left", lambda state: state.has('Oubliette07Right2', player) or state.has('Oubliette07Bottom1', player))
    fn("Oubliette09Top", lambda state: state.has('Oubliette07Bottom1', player) or state.has('Oubliette07Left1', player) or state.has('Oubliette07Left2', player) or state.has('Oubliette07Bottom2', player) or state.has('Oubliette07Right1', player) or state.has('Oubliette07Right2', player))
    fn("Oubliette11Left2", lambda state: state.has('Oubliette08Right', player) or state.has('Oubliette08Left', player) and state.has(LEDGE, player))
    fn("Oubliette09Right", lambda state: state.has('Oubliette08Left', player) or state.has('Oubliette08Right', player) or state.has('Oubliette08Top', player))
    fn("Oubliette13Bottom", lambda state: state.has('Oubliette08Top', player) or state.has('Oubliette08Right', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette08Left", lambda state: state.has('Oubliette09Right', player) or state.has('Oubliette09Top', player) and state.has('Aptitude.dive', player) and state.has(HORIZONTAL, player))
    fn("Oubliette10Right", lambda state: state.has('Oubliette09Left', player) or state.has('Oubliette09Top', player) and state.has('Aptitude.dive', player))
    fn("Oubliette07Bottom1", lambda state: state.has('Oubliette09Top', player) or state.has('Oubliette09Left', player))
    fn("Oubliette09Left", lambda state: state.has('Oubliette10Right', player) or state.has('Oubliette_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette03Right", lambda state: state.has('Oubliette10Left1', player) or state.has('Oubliette_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette17Right", lambda state: state.has('Oubliette10Left2', player) or state.has('Oubliette_10_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has(CHARGE, player))
    fn("Oubliette06Bottom", lambda state: state.has('Oubliette10Top', player) or state.has('Oubliette_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette12Left", lambda state: state.has('Oubliette11Right1', player) or state.has('Oubliette11Left1', player) or state.has('Oubliette11Top', player))
    fn("Oubliette08Right", lambda state: state.has('Oubliette11Left2', player) or state.has('Oubliette11Left1', player) or state.has('Oubliette11Right1', player) or state.has('Oubliette11Top', player) or state.has('Oubliette11Right2', player))
    fn("Oubliette14Left", lambda state: state.has('Oubliette11Right2', player) or state.has('Oubliette11Left2', player))
    fn("Oubliette13Right", lambda state: state.has('Oubliette11Left1', player) or state.has('Oubliette11Left2', player) and state.has('Aptitude.Hook', player) or state.has('Oubliette11Right2', player) and (state.has(HORIZONTAL, player) or state.has(LEDGE, player)))
    fn("Oubliette132Top", lambda state: state.has('Oubliette11Bottom', player) or state.has('Oubliette11Left1', player) and state.has('Aptitude.pound_attack', player))
    fn("Oubliette131Bottom", lambda state: state.has('Oubliette11Top', player) or state.has('Oubliette11Left1', player) and state.has('Aptitude.wallgrab', player) and (state.has(FULLSILVA, player) or (state.has('Aptitude.Hook', player) and (state.has(HORIZONTAL, player) or state.has(LEDGE, player)))))
    fn("Oubliette11Right1", lambda state: state.has('Oubliette12Left', player) or state.has('Oubliette_12_GAMEPLAY.BP_e2182_Shadow', player))
    fn("Oubliette11Top", lambda state: state.has('Oubliette131Bottom', player))
    fn("Oubliette11Bottom", lambda state: state.has('Oubliette132Top', player))
    fn("Oubliette08Top", lambda state: state.has('Oubliette13Bottom', player) or state.has('Oubliette13Right', player))
    fn("Oubliette11Left1", lambda state: state.has('Oubliette13Right', player) or state.has('Oubliette13Left', player))
    fn("Oubliette07Right2", lambda state: state.has('Oubliette13Left', player) or state.has('Oubliette13Right', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) and state.has(HORIZONTAL, player)))
    fn("Oubliette11Right2", lambda state: state.has('Oubliette14Left', player) or state.has('Oubliette_14_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette15Left", lambda state: state.has('Oubliette14Right', player) or state.has('Oubliette_14_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette14Right", lambda state: state.has('Oubliette15Left', player) or state.has('Oubliette15Right', player))
    fn("Oubliette16Left", lambda state: state.has('Oubliette15Right', player) or state.has('Oubliette15Left', player))
    fn("Oubliette15Right", lambda state: state.has('Oubliette16Left', player) or state.has('Oubliette16Right', player))
    fn("Outside01Left2", lambda state: state.has('Oubliette16Right', player) or state.has('Oubliette16Left', player) and (state.has('Aptitude.Hook', player) and (state.has('sinner', player) and (state.has(LEDGE, player) or state.has('Aptitude.dash', player) or state.has('Aptitude.Dodge', player)) or state.has('silva', player) and (state.has('Aptitude.double_jump', player) or state.has('Aptitude.Dodge', player) or state.has('champion', player) and state.has('Aptitude.dash', player)) or state.has('Aptitude.double_jump', player) and (state.has('Aptitude.Dodge', player) or state.has('champion', player))) or state.has('silva', player) and state.has('Aptitude.double_jump', player) and (state.has('Aptitude.wallgrab', player) or state.has('champion', player) or state.has('Aptitude.Dodge', player))))
    fn("Oubliette10Left2", lambda state: state.has('Oubliette17Right', player))
    fn("Swamp06Top", lambda state: state.has('Oubliette17Bottom', player) or state.has('Oubliette17Right', player) and (state.has(CHARGE, player) and state.has('Aptitude.pound_attack', player) and (state.has('Aptitude.Dodge', player) and state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player))))
    fn("Outside02Left", lambda state: state.has('Outside01Right', player) or state.has('Outside01Left1', player) or state.has('Outside01Left2', player))
    fn("Outside03Right", lambda state: state.has('Outside01Left1', player) or state.has('Outside01Right', player) and state.has('Aptitude.wallgrab', player) and state.has('silva', player) and state.has('Aptitude.double_jump', player))
    fn("Oubliette16Right", lambda state: state.has('Outside01Left2', player))
    fn("Outside01Right", lambda state: state.has('Outside02Left', player))
    fn("Outside01Left1", lambda state: state.has('Outside03Right', player) or state.has('Outside03Top', player))
    fn("Fort09Right", lambda state: state.has('Outside03Top', player))
    fn("Swamp05Top", lambda state: state.has('Swamp04Bottom', player) or state.has('Swamp04Left', player) and state.has(LEDGE, player))
    fn("Swamp3Right", lambda state: state.has('Swamp04Left', player) or state.has('Swamp04Bottom', player) and state.has(LEDGE, player))
    fn("Swamp04Bottom", lambda state: state.has('Swamp05Top', player) or state.has('Swamp05Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Swamp06Left", lambda state: state.has('Swamp05Right', player) or state.has('Swamp05Top', player) or state.has('Swamp05Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Swamp07Right", lambda state: state.has('Swamp05Bottom', player) or state.has('Swamp05Left', player) and state.has('Aptitude.dive', player) and state.has(CHARGE, player))
    fn("Swamp09Right2", lambda state: state.has('Swamp05Left', player) or state.has('Swamp05Right', player))
    fn("Swamp05Right", lambda state: state.has('Swamp06Left', player) or state.has('Swamp_06_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Oubliette17Bottom", lambda state: state.has('Swamp06Top', player))
    fn("Swamp16Top", lambda state: state.has('Swamp07Bottom', player) or state.has('Swamp07Right', player) and state.has('Swamp07Left', player) and state.has('Swamp07Top', player))
    fn("Swamp05Bottom", lambda state: state.has('Swamp07Right', player))
    fn("Swamp08Right1", lambda state: state.has('Swamp07Left', player))
    fn("Swamp3Bottom", lambda state: state.has('Swamp07Top', player))
    fn("Swamp07Left", lambda state: state.has('Swamp08Right1', player) or state.has('Swamp08Right2', player) and (state.has('Aptitude.Hook', player) or (state.has('Aptitude.wallgrab', player) and (state.has('Aptitude.double_jump', player) or state.has('champion', player) or state.has('silva', player) and state.has('Aptitude.Dodge', player)))) and (state.has('Aptitude.double_jump', player) or state.has(HORIZONTAL, player)))
    fn("Swamp15Left", lambda state: state.has('Swamp08Right2', player) or state.has('Swamp08Top', player) or state.has('Swamp08Right1', player))
    fn("Swamp14Bottom", lambda state: state.has('Swamp08Top', player) or state.has('Swamp08Right2', player) and state.has(LEDGE, player))
    fn("Swamp13Top1", lambda state: state.has('Swamp09Bottom1', player) or state.has('Swamp09Right1', player) and state.has(CHARGE, player))
    fn("Swamp3Left", lambda state: state.has('Swamp09Right1', player) or state.has('Swamp09Right2', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Swamp13Top2", lambda state: state.has('Swamp09Bottom2', player) or state.has('Swamp09Right2', player))
    fn("Swamp05Left", lambda state: state.has('Swamp09Right2', player) or state.has('Swamp09Right1', player))
    fn("Swamp3Top", lambda state: state.has('Swamp1Bottom', player) or state.has('Swamp_1_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp2Right", lambda state: state.has('Swamp1Left', player) or state.has('Swamp_1_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp13Left", lambda state: state.has('Swamp10Right', player) or state.has('Swamp_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp15Top", lambda state: state.has('Swamp11Bottom', player) or state.has('Swamp11Left', player))
    fn("Swamp14Right", lambda state: state.has('Swamp11Left', player) or state.has('Swamp11Bottom', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(TWO_LEDGE, player)) and (state.has('Aptitude.double_jump', player) or state.has('champion', player) or (state.has('silva', player) and state.has('Aptitude.Dodge', player))))
    fn("Swamp15Right", lambda state: state.has('Swamp12Left', player) or state.has('Swamp_12_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Abyss04Top", lambda state: state.has('Swamp12Bottom', player) or state.has('Swamp_12_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.door_unlock', player))
    fn("Swamp10Right", lambda state: state.has('Swamp13Left', player) or state.has('Swamp13Top1', player) and state.has('Aptitude.pound_attack', player) or state.has('Swamp13Top2', player) and state.has(CHARGE, player) and state.has('Aptitude.pound_attack', player))
    fn("Swamp09Bottom1", lambda state: state.has('Swamp13Top1', player))
    fn("Swamp09Bottom2", lambda state: state.has('Swamp13Top2', player))
    fn("Swamp14Top", lambda state: state.has('Swamp13Bottom', player) or state.has('Aptitude.pound_attack', player) and (state.has('Swamp13Top1', player) or state.has('Swamp13Left', player)))
    fn("Swamp13Bottom", lambda state: state.has('Swamp14Top', player))
    fn("Swamp11Left", lambda state: state.has('Swamp14Right', player) or state.has('Swamp14Top', player) or state.has('Swamp14Bottom', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)))
    fn("Swamp08Top", lambda state: state.has('Swamp14Bottom', player) or state.has('Swamp14Right', player))
    fn("Swamp11Bottom", lambda state: state.has('Swamp15Top', player) or state.has('Swamp15Right', player) and state.has(LEDGE, player))
    fn("Swamp08Right2", lambda state: state.has('Swamp15Left', player) or state.has('Swamp15Right', player) and state.has(LEDGE, player))
    fn("Swamp12Left", lambda state: state.has('Swamp15Right', player) or state.has('Swamp15Left', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)) or state.has('Swamp15Top', player))
    fn("Swamp07Bottom", lambda state: state.has('Swamp16Top', player) or state.has('Swamp_16_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp17Right", lambda state: state.has('Swamp16Left', player) or state.has('Swamp_16_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp18Right", lambda state: state.has('Swamp17Left', player) or state.has('Swamp17Right', player))
    fn("Swamp16Left", lambda state: state.has('Swamp17Right', player) or state.has('Swamp17Left', player))
    fn("Abyss01Top", lambda state: state.has('Swamp18Bottom', player) or state.has('Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2', player) and state.has('Aptitude.door_unlock', player))
    fn("Swamp17Left", lambda state: state.has('Swamp18Right', player) or state.has('Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2', player))
    fn("Swamp1Left", lambda state: state.has('Swamp2Right', player) or state.has('Swamp2Top', player) and (state.has('Aptitude.dash', player) or state.has('Aptitude.Dodge', player)))
    fn("Forest09Left", lambda state: state.has('Swamp2Top', player) or state.has('Swamp2Right', player))
    fn("Swamp09Right1", lambda state: state.has('Swamp3Left', player) or state.has('Swamp3Bottom', player))
    fn("Swamp1Bottom", lambda state: state.has('Swamp3Top', player) or state.has('Swamp3Left', player) and state.has(LEDGE, player))
    fn("Swamp04Left", lambda state: state.has('Swamp3Right', player) or state.has('Swamp3Bottom', player) or state.has('Swamp3Top', player))
    fn("Swamp07Top", lambda state: state.has('Swamp3Bottom', player) or state.has('Swamp3Top', player) or state.has('Swamp3Right', player))
    fn("Village02Left", lambda state: state.has('Village01Right', player) or state.has('Village01Bottom', player))
    fn("Church08Top", lambda state: state.has('Village01Bottom', player) or state.has('Village01Right', player))
    fn("Village03Bottom1", lambda state: state.has('Village02Right', player) or state.has('Village02Bottom', player) or state.has('Village02Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Village01Right", lambda state: state.has('Village02Left', player) or state.has('Village02Bottom', player))
    fn("Village13Left", lambda state: state.has('Village02Bottom', player) or state.has('Village02Right', player))
    fn("Village02Right", lambda state: state.has('Village03Bottom1', player) or state.has('Village03Right', player) and (state.has(HORIZONTAL, player) or state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Village05Left", lambda state: state.has('Village03Right', player) or state.has('Village03Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Village13Top", lambda state: state.has('Village03Bottom2', player) or state.has('Village03Right', player) and state.has('Aptitude.pound_attack', player))
    fn("Village04Top", lambda state: state.has('Village041Bottom', player))
    fn("Village041Bottom", lambda state: state.has('Village04Top', player) or state.has('Village04Right', player))
    fn("Village05Top", lambda state: state.has('Village04Right', player) or state.has('Village04Top', player))
    fn("Village04Right", lambda state: state.has('Village05Top', player) or state.has('Village_05_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village03Right", lambda state: state.has('Village05Left', player) or state.has('Village_05_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village06Left", lambda state: state.has('Village05Right', player) or state.has('Village_05_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village05Right", lambda state: state.has('Village06Left', player) or state.has('Village06Right2', player) and state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player))
    fn("Village07Left", lambda state: state.has('Village06Right1', player) or state.has('Village06Right2', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Village12Top", lambda state: state.has('Village06Bottom', player) or state.has('Village06Left', player) and state.has('Aptitude.pound_attack', player))
    fn("Village08Left", lambda state: state.has('Village06Right2', player) or state.has('Village06Left', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player)) or state.has('Village06Right1', player))
    fn("Village06Right1", lambda state: state.has('Village07Left', player) or state.has('Village07Right', player))
    fn("Village09Left1", lambda state: state.has('Village07Right', player) or state.has('Village07Left', player) or state.has('Village07Top', player))
    fn("Village14Bottom", lambda state: state.has('Village07Top', player) or state.has('Village07Right', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) and state.has('sinner', player) or state.has('Aptitude.double_jump', player) and (state.has('Aptitude.Dodge', player) or state.has('silva', player) or state.has('champion', player)) or state.has('Aptitude.Dodge', player) and (state.has('silva', player) or state.has('champion', player) and state.has('Aptitude.dash', player))))
    fn("Village06Right2", lambda state: state.has('Village08Left', player) or state.has('Village08Right', player))
    fn("Village09Left2", lambda state: state.has('Village08Right', player) or state.has('Village08Left', player))
    fn("Village10Left", lambda state: state.has('Village09Right1', player) or state.has('Village_09_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village15Left", lambda state: state.has('Village09Right2', player) or state.has('Village_09_GAMEPLAY.BP_Interactable_Item_Tip4', player) and state.has('Aptitude.dive', player))
    fn("Village07Right", lambda state: state.has('Village09Left1', player) or state.has('Village_09_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village08Right", lambda state: state.has('Village09Left2', player) or state.has('Village_09_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village09Right1", lambda state: state.has('Village_10_GAMEPLAY.BP_e5050_Giant', player))
    fn("Village11Left", lambda state: state.has('Village_10_GAMEPLAY.BP_e5050_Giant', player))
    fn("Village11Top", lambda state: state.has('Village111Bottom', player))
    fn("Village111Bottom", lambda state: state.has('Village11Top', player) or state.has('Village11Left', player))
    fn("Village10Right", lambda state: state.has('Village11Left', player) or state.has('Village11Right', player) and state.has('Aptitude.wallgrab', player))
    fn("Castle01Left", lambda state: state.has('Village11Right', player) or state.has('Village11Left', player) and state.has('Aptitude.wallgrab', player))
    fn("Village06Bottom", lambda state: state.has('Village12Top', player))
    fn("Village13Right", lambda state: state.has('Village12Left1', player) or state.has('Village12Right', player) and state.has('Village12Top', player))
    fn("Cave01Left", lambda state: state.has('Village12Right', player) or state.has('Village12Left1', player) and state.has('Village12Top', player) and state.has('Aptitude.dive', player))
    fn("Village16Right", lambda state: state.has('Village12Left2', player) or state.has('Village12Left1', player) and state.has(CHARGE, player))
    fn("Village03Bottom2", lambda state: state.has('Village13Top', player) or state.has('Village13Right', player) and state.has(LEDGE, player))
    fn("Village02Bottom", lambda state: state.has('Village13Left', player) or state.has('Village13Right', player))
    fn("Village12Left1", lambda state: state.has('Village13Right', player) or state.has('Village13Top', player))
    fn("Village07Top", lambda state: state.has('Village14Bottom', player))
    fn("Village09Right2", lambda state: state.has('Village15Left', player) or state.has('Village15Right', player) and state.has('Aptitude.dive', player))
    fn("Fort01Left2", lambda state: state.has('Village15Right', player) or state.has('Village15Left', player) and state.has('Village_15_GAMEPLAY.BP_SCR_LV1LL_0000_2', player))
    fn("Village12Left2", lambda state: state.has('Village16Right', player))
    

    # Locations for items

    fn("Abyss_01_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Abyss01Top', player))
    fn("Abyss_01_GAMEPLAY.BP_SCR_LV2M_2171_2", lambda state: state.has('Abyss01Bottom', player))
    fn("Abyss_02_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Abyss02Top', player) and (state.has('Aptitude.wallgrab', player) and state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Abyss_02_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Abyss02Top', player))
    fn("Abyss_02_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Abyss02Top', player))
    fn("Abyss_02_GAMEPLAY.BP_Interactable_Passive_healcountup_2", lambda state: state.has('Abyss02Top', player))
    fn("Abyss_04_GAMEPLAY.BP_SCR_LV1L_2170_2", lambda state: state.has('Abyss04Top', player) and state.has('Passive.i_passive_ignore_damage_area', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.Hook', player) and state.has(THREE_HEAL, player) and state.has('Aptitude.dash', player))
    fn("Abyss_04_GAMEPLAY.BP_SCR_LV1L_2170_3", lambda state: state.has('Abyss04Top', player) and state.has('Passive.i_passive_ignore_damage_area', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.Hook', player) and state.has(THREE_HEAL, player) and state.has('Aptitude.dash', player))
    fn("Abyss_05_GAMEPLAY.BP_Interactable_Item_FinalPassivePart_2", lambda state: state.has('Abyss05Top', player))
    fn("Abyss_05_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Abyss05Top', player))
    fn("Abyss_05_GAMEPLAY.BP_SCR_LV3S_5000_1", lambda state: state.has('Abyss05Top', player))
    fn("Castle_01_GAMEPLAY.BP_e2082_Dog", lambda state: state.has('Castle01Left', player) or state.has('Castle01Right1', player) or state.has('Castle01Top', player) or state.has('Castle01Right2', player))
    fn("Castle_01_GAMEPLAY.BP_Interactable_Passive_healcountup_4", lambda state: state.has('Castle01Right2', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Castle_01_GAMEPLAY.BP_Interactable_Passive_Spirit_StunStaminaDamageUp_2", lambda state: state.has('Castle01Right1', player) or state.has('Castle01Top', player))
    fn("Castle_01_GAMEPLAY.BP_SCR_LV1L_2031_2", lambda state: state.has('Castle_01_GAMEPLAY.BP_e2082_Dog', player) and state.has(CHARGE, player))
    fn("Castle_01_GAMEPLAY.BP_SCR_LV2M_2001_2", lambda state: state.has('Castle_01_GAMEPLAY.BP_e2082_Dog', player) and state.has(CHARGE, player))
    fn("Castle_02_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Castle02Top', player))
    fn("Castle_02_GAMEPLAY.BP_SCR_LV1M_2000_3", lambda state: state.has('Castle02Top', player) and state.has('Aptitude.Hook', player))
    fn("Castle_03_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: (state.has('Castle03Top1', player) or state.has('Castle03Top2', player)) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player) or state.has(LEDGE, player)))
    fn("Castle_03_GAMEPLAY.BP_SCR_LV1M_2001_2", lambda state: (state.has('Castle03Top1', player) or state.has('Castle03Top2', player)) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Castle_04_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle04Top', player))
    fn("Castle_06_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Castle06Top', player))
    fn("Castle_06_GAMEPLAY.BP_SCR_LV1L_2030_3", lambda state: state.has('Castle06Right', player) and state.has('Aptitude.wallgrab', player))
    fn("Castle_07_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle07Right', player) or state.has('Castle07Left', player))
    fn("Castle_08_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Castle08Top', player) and state.has('Aptitude.wallgrab', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Castle_08_GAMEPLAY.BP_Interactable_Passive_expup_5", lambda state: state.has('Castle08Top', player))
    fn("Castle_08_GAMEPLAY.BP_SCR_LV1M_2000_2", lambda state: state.has('Castle08Top', player))
    fn("Castle_08_GAMEPLAY.BP_SCR_LV1M_2000_3", lambda state: state.has('Castle08Top', player))
    fn("Castle_08_GAMEPLAY.BP_SCR_LV1S_2010_3", lambda state: state.has('Castle08Right', player))
    fn("Castle_09_GAMEPLAY.BP_SCR_LV2M_2000_3", lambda state: state.has('Castle09Left', player) and (state.has(TWO_HORIZONTAL, player) or state.has('Aptitude.wallgrab', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)) or state.has(FULLSILVA, player) or state.has(LEDGE, player) and state.has('sinner', player) or state.has('Aptitude.double_jump', player) and state.has('Aptitude.dash', player) and (state.has('silva', player) or state.has('Aptitude.Dodge', player))))
    fn("Castle_10_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle10Right', player) or state.has('Castle10Bottom', player))
    fn("Castle_10_GAMEPLAY.BP_SCR_LV1M_2000_3", lambda state: state.has('Castle_10_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle_12_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Castle12Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Castle_12_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle12Bottom', player))
    fn("Castle_12_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Castle12Bottom', player))
    fn("Castle_12_GAMEPLAY.BP_SCR_LV1M_2001_1", lambda state: state.has('Castle12Bottom', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) or state.has(HORIZONTAL, player)))
    fn("Castle_13_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_2", lambda state: state.has('Castle13Bottom', player) and (state.has('silva', player) and state.has('Aptitude.double_jump', player) and state.has('Aptitude.wallgrab', player) or (state.has(FULLSILVA, player) or state.has(THREE_LEDGE, player)) and state.has('Aptitude.Hook', player) or state.has(TWO_LEDGE, player) and state.has('Aptitude.Hook', player) and state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player) and state.has('Aptitude.wallgrab', player) and state.has('Aptitude.Hook', player)))
    fn("Castle_14_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Castle14Left', player) and state.has('Aptitude.Hook', player))
    fn("Castle_14_GAMEPLAY.BP_SCR_LV1L_2220_3", lambda state: state.has('Castle14Left', player) and state.has(CHARGE, player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Castle_14_GAMEPLAY.BP_SCR_LV2LL_0000_2", lambda state: state.has('Castle14Left', player) and (state.has('Aptitude.wallgrab', player) and (state.has(THREE_LEDGE, player) or state.has(FULLSILVA, player) or state.has('sinner', player) and state.has(TWO_LEDGE, player) or state.has('silva', player) and state.has(TWO_HORIZONTAL, player) or state.has('Aptitude.Dodge', player) and state.has('Aptitude.dash', player) and state.has(TWO_LEDGE, player))))
    fn("Castle_15_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Castle_15_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Castle_15_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle15Bottom', player) or state.has('Castle15Left', player))
    fn("Castle_16_GAMEPLAY.BP_e2032_BigKnight", lambda state: state.has('Castle16Right', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1M_2190_3", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1M_2190_4", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1M_2190_6", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1M_2190_7", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1M_2191_2", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1S_2100_3", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1S_2100_4", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1S_2100_6", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1S_2101_2", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player))
    fn("Castle_16_GAMEPLAY.BP_SCR_LV1S_2101_4", lambda state: state.has('Castle_16_GAMEPLAY.BP_e2032_BigKnight', player) and state.has('Aptitude.wallgrab', player))
    fn("Castle_17_GAMEPLAY.BP_SCR_LV1M_2000_3", lambda state: state.has('Castle17Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Castle_18_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Castle18Right', player) and state.has(CHARGE, player))
    fn("Castle_18_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Castle18Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) and state.has(LEDGE, player)) and state.has(CHARGE, player))
    fn("Castle_18_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Castle18Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) and state.has(LEDGE, player)) and state.has(CHARGE, player))
    fn("Castle_18_GAMEPLAY.BP_SCR_LV2L_2221_2", lambda state: state.has('Castle18Bottom', player) and state.has('Aptitude.Hook', player) and state.has(LEDGE, player) and state.has(CHARGE, player))
    fn("Castle_19_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle19Right', player) or state.has('Castle19Left', player))
    fn("Castle_20_GAMEPLAY.BP_e5030_Leader", lambda state: state.has('Castle20Left', player))
    fn("Castle_21_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Castle21Left', player))
    fn("Castle_21_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Castle21Left', player))
    fn("Castle_21_GEO.BP_SCR_LV1L_2120_2", lambda state: state.has('Castle21Left', player))
    fn("Cave_01_GAMEPLAY.BP_Interactable_Passive_Parry_2", lambda state: state.has('Cave01Bottom', player) or state.has('Cave01Left', player))
    fn("Cave_01_GAMEPLAY.BP_SCR_LV2LL_0000_2", lambda state: state.has('Cave01Bottom', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.double_jump', player) or state.has('champion', player) or state.has('silva', player) and state.has('Aptitude.Dodge', player)) or state.has('Cave01Left', player) and state.has(THREE_LEDGE, player) and state.has(TWO_HORIZONTAL, player))
    fn("Cave_02_GAMEPLAY.BP_SCR_LV1M_2160_1", lambda state: state.has('Cave02Right', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and (state.has(HORIZONTAL, player) or state.has('Aptitude.double_jump', player) or state.has('champion', player) and state.has('Aptitude.dash', player) or state.has('silva', player) and state.has('Aptitude.dash', player))))
    fn("Cave_02_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Cave02Right', player))
    fn("Cave_03_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Cave03Left', player) or state.has('Cave03Right', player) or state.has('Cave03Top', player))
    fn("Cave_03_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Cave03Right', player))
    fn("Cave_04_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Cave04Bottom', player))
    fn("Cave_05_GAMEPLAY.BP_SCR_LV1M_2161_2", lambda state: state.has('Cave05Bottom', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has('Aptitude.dash', player) or state.has(HORIZONTAL, player)))
    fn("Cave_06_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Cave06Top', player))
    fn("Cave_06_GAMEPLAY.BP_Interactable_Item_Tip5", lambda state: state.has('Cave06Top', player))
    fn("Cave_06_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Cave06Top', player))
    fn("Cave_07_GAMEPLAY.BP_e2162_Spider", lambda state: state.has('Cave07Right', player) or state.has('Cave07Top', player))
    fn("Cave_07_GAMEPLAY.BP_SCR_LV1M_2161_2", lambda state: state.has('Cave_07_GAMEPLAY.BP_e2162_Spider', player) and state.has('Aptitude.dive', player))
    fn("Cave_08_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Cave08Left', player) and state.has('Aptitude.pound_attack', player))
    fn("Cave_09_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Cave09Top', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Cave_09_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Cave09Top', player))
    fn("Cave_10_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Cave10Left', player))
    fn("Cave_10_GAMEPLAY.BP_SCR_LV1S_2011_2", lambda state: state.has('Cave10Bottom', player))
    fn("Cave_11_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Cave11Left', player) or state.has('Cave11Top', player) or state.has('Cave11Right1', player) or state.has('Cave11Right2', player))
    fn("Cave_11_GAMEPLAY.BP_SCR_LV1M_2161_2", lambda state: state.has('Cave11Left', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.Hook', player) or state.has('Aptitude.dash', player)))
    fn("Cave_11_GAMEPLAY.BP_SCR_LV2M_2050_2", lambda state: state.has('Cave_11_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.dive', player))
    fn("Cave_12_GAMEPLAY.BP_Interactable_Item_FinalPassivePart_2", lambda state: state.has('Cave12Right', player))
    fn("Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Cave13Top', player) or state.has('Cave13Left', player) or state.has('Cave13Right', player) or state.has('Cave13Bottom', player))
    fn("Cave_13_GAMEPLAY.BP_SCR_LV2L_2091_4", lambda state: state.has('Cave_13_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.Hook', player) or state.has('Cave13Bottom', player) and state.has('Aptitude.wallgrab', player))
    fn("Cave_13_GAMEPLAY.BP_SCR_LV2M_2161_5", lambda state: state.has('Cave13Left', player) and (state.has('Aptitude.dash', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Cave_14_GAMEPLAY.BP_SCR_LV1S_2020_7", lambda state: state.has('Cave14Right', player))
    fn("Cave_15_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Cave15Right', player))
    fn("Cave_15_GAMEPLAY.BP_SCR_LV1L_2070_3", lambda state: state.has('Cave15Right', player) and state.has('Aptitude.pound_attack', player))
    fn("Cave_15_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Cave15Right', player) or state.has('Cave15Left', player))
    fn("Cave_16_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Cave16Right', player) or state.has('Cave16Bottom', player) or state.has('Cave16Left', player))
    fn("Cave_16_GAMEPLAY.BP_SCR_LV1L_2091_5", lambda state: state.has('Cave_16_GAMEPLAY.BP_Interactable_Item_Tip4', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player))))
    fn("Cave_17_GAMEPLAY.BP_SCR_LV3M_5000_2", lambda state: state.has('Cave17Top', player) and state.has('Aptitude.dive', player))
    fn("Cave_18_GAMEPLAY.BP_Interactable_Passive_healpowerup_2", lambda state: state.has('Cave18Left1', player))
    fn("Cave_19_GAMEPLAY.BP_e2022_Soldier", lambda state: state.has('Cave19Top', player) or state.has('Cave19Left', player))
    fn("Cave_19_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Cave_19_GAMEPLAY.BP_e2022_Soldier', player))
    fn("Cave_19_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Cave_19_GAMEPLAY.BP_e2022_Soldier', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Cave_20_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Cave20Top', player))
    fn("Cave_20_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Cave20Top', player))
    fn("Cave_20_GAMEPLAY.BP_SCR_LV1S_2011_2", lambda state: state.has('Cave20Top', player))
    fn("Cave_21_GAMEPLAY.BP_Interactable_Passive_healcountup_2", lambda state: state.has('Cave21Right', player) or state.has('Cave21Left', player))
    fn("Cave_22_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Cave22Right', player))
    fn("Cave_23_GAMEPLAY.BP_e5021_OlderSister", lambda state: state.has('Cave23Right', player) or state.has('Cave23Left', player))
    fn("Cave_23_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Cave_23_GAMEPLAY.BP_e5021_OlderSister', player))
    fn("Church_02_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Church02Right', player))
    fn("Church_02_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Church02Right', player))
    fn("Church_03_GAMEPLAY.BP_e5011_YoungerSister", lambda state: state.has('Church03Left', player))
    fn("Church_04_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Church04Right', player) or state.has('Church04Left', player))
    fn("Church_05_GAMEPLAY.BP_Interactable_Passive_MaxHPUp_Lv1_2", lambda state: state.has('Church05Top', player) or state.has('CathedralCloister', player) and state.has(LEDGE, player))
    fn("CathedralCloister", lambda state: state.has('Church05Right', player) or state.has('Church05Bottom', player) or state.has('Church05Top', player))
    fn("Church_07_GAMEPLAY.BP_e2012_Slime_Unique", lambda state: state.has('Church07Right', player))
    fn("Church_07_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Church_07_GAMEPLAY.BP_e2012_Slime_Unique', player) and state.has('Aptitude.pound_attack', player))
    fn("Church_08_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Church_08_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.dive', player))
    fn("Church_08_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Church08Top', player) or state.has('Church08Bottom', player) or state.has('Church08Left', player))
    fn("Church_09_GAMEPLAY.BP_e2092_Priest", lambda state: state.has('Church09Bottom', player) or state.has('Church09Top', player))
    fn("Church_09_GAMEPLAY.BP_Interactable_Passive_JumpHeightUp_2", lambda state: state.has('Church09Bottom', player) and state.has('Aptitude.wallgrab', player) and state.has(CHARGE, player))
    fn("Church_09_GAMEPLAY.BP_SCR_LV2M_2001_2", lambda state: state.has('Church_09_GAMEPLAY.BP_e2092_Priest', player))
    fn("Church_10_GAMEPLAY.BP_Interactable_Item_Tip_2", lambda state: state.has('Church10Left', player) or state.has('Church10Right', player))
    fn("Church_10_GAMEPLAY.BP_Interactable_Item_Tip2", lambda state: state.has('Church_10_GAMEPLAY.BP_Interactable_Item_Tip_2', player))
    fn("Church_11_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Church11Left', player))
    fn("Church_11_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Church11Top', player))
    fn("Church_12_GAMEPLAY.BP_Interactable_Item_Tip1", lambda state: state.has('Church12Right', player) and state.has('Menu'))
    fn("Church_13_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Church13Top', player))
    fn("Church_14_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Church14Bottom', player))
    fn("Church_14_GAMEPLAY.BP_Interactable_Item_Tip5", lambda state: state.has('Church14Bottom', player))
    fn("Forest_02_GAMEPLAY.BP_SCR_LV1S_2130_2", lambda state: state.has('Forest02Left', player) or state.has('Forest02Right2', player) and state.has('Aptitude.Hook', player))
    fn("Forest_03_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Forest03Left', player) and state.has('Aptitude.dive', player))
    fn("Forest_03_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Forest03Left', player) and state.has('Aptitude.dive', player))
    fn("Forest_04_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Forest04Right', player))
    fn("Forest_04_GAMEPLAY.BP_Interactable_Passive_dmgup_swimming_2", lambda state: state.has('Forest04Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) and state.has(HORIZONTAL, player)))
    fn("Forest_04_GAMEPLAY.BP_SCR_LV1S_2100_2", lambda state: state.has('Forest04Left', player) and (state.has('Aptitude.pound_attack', player) and state.has(LEDGE, player)))
    fn("Forest_05_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Forest05Right', player) or state.has('Forest05Left', player) or state.has('Forest05Top', player))
    fn("Forest_06_GAMEPLAY.BP_e2122_Fungus", lambda state: state.has('Forest06Bottom', player) and state.has(LEDGE, player))
    fn("Forest_06_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Forest06Bottom', player) and state.has(LEDGE, player))
    fn("Forest_06_GAMEPLAY.BP_SCR_LV2M_2120_3", lambda state: state.has('Forest06Bottom', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) and state.has('Aptitude.pound_attack', player) or state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Forest_07_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: (state.has('Forest07Left', player) or state.has('Forest07Bottom', player)) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player) or state.has(HORIZONTAL, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest_07_GAMEPLAY.BP_SCR_LV1S_2121_1", lambda state: state.has('Forest07Right', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player)))
    fn("Forest_07_GAMEPLAY.BP_SCR_LV1S_2130_2", lambda state: state.has('Forest07Left', player) or state.has('Forest07Right', player))
    fn("Forest_08_GAMEPLAY.BP_Interactable_Passive_Treasure_2", lambda state: state.has('Forest08Top', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player) and state.has(HORIZONTAL, player)))
    fn("Forest_08_GAMEPLAY.BP_Interactable_Passive_Treasure2", lambda state: state.has('Forest_08_GAMEPLAY.BP_Interactable_Passive_Treasure_2', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has('Aptitude.wallgrab', player) and state.has('sinner', player) or state.has('Aptitude.Hook', player)))
    fn("Forest_08_GAMEPLAY.BP_SCR_LV2M_2120_1", lambda state: state.has('Forest08Top', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Forest_09_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Forest10Left', player) and state.has('Aptitude.dive', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest_09_GAMEPLAY.BP_Interactable_Item_Tip1", lambda state: state.has('Forest10Left', player) and state.has('Aptitude.dive', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Forest_09_GAMEPLAY.BP_SCR_LV2S_2130_2", lambda state: (state.has('Forest09Top', player) or state.has('Forest09Left', player)) and state.has('Aptitude.dive', player))
    fn("Forest_10_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Forest10Bottom2', player) or state.has('Forest10Bottom1', player) or state.has('Forest10Left', player) or state.has('Forest10Right', player))
    fn("Forest_11_GAMEPLAY.BP_e2132_Mandrake", lambda state: state.has('Forest11Top', player))
    fn("Forest_11_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Forest11Top', player))
    fn("Forest_11_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Forest11Top', player))
    fn("Forest_11_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Forest11Right', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Forest_11_GAMEPLAY.BP_SCR_LV1M_2120_2", lambda state: state.has('Forest11Right', player) and (state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) or state.has(TWO_HORIZONTAL, player) and (state.has('Aptitude.dash', player) or state.has('Aptitude.double_jump', player) or state.has('silva', player))))
    fn("Forest_11_GAMEPLAY.BP_SCR_LV1S_2130_2", lambda state: state.has('Forest11Right', player) and state.has('Aptitude.dive', player))
    fn("Forest_12_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Forest12Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)))
    fn("Forest_12_GAMEPLAY.BP_SCR_LV1M_2131_3", lambda state: state.has('Forest12Bottom', player) or state.has('Forest12Right', player))
    fn("Forest_13_GAMEPLAY.BP_SCR_LV1S_2130_3", lambda state: state.has('Forest13Top', player))
    fn("Forest_14_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Forest14Bottom', player) or state.has('Forest14Top', player) or state.has('Forest14Left', player))
    fn("Forest_15_GAMEPLAY.BP_e5040_Witch", lambda state: state.has('Forest15Top', player))
    fn("Forest_16_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Forest16Left', player))
    fn("Forest_16_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Forest16Left', player))
    fn("Forest_16_GAMEPLAY.BP_SCR_LV1LL_0000_2", lambda state: state.has('Forest16Left', player))
    fn("Forest_17_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_Treasure_2", lambda state: state.has('Forest17Left', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Forest_17_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Forest17Left', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has('Aptitude.Hook', player) or state.has('silva', player) and state.has('Aptitude.double_jump', player)))
    fn("Forest_17_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Forest17Left', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player)))
    fn("Forest_17_Map.BP_Interactable_Item_Tip5", lambda state: state.has('Forest17Left', player))
    fn("Fort_01_GAMEPLAY.BP_e2192_Gargoyle", lambda state: state.has('Fort01Left1', player) or state.has('Fort01Right', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Fort_01_GAMEPLAY.BP_SCR_LV1M_2190_2", lambda state: state.has('Fort01Left1', player))
    fn("Fort_02_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Fort02Left', player))
    fn("Fort_02_GAMEPLAY.BP_SCR_LV2S_2021_2", lambda state: state.has('Fort02Right', player))
    fn("Fort_03_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort03Right', player) or state.has('Fort03Left1', player) or state.has('Fort03Left2', player) or state.has('Fort03Top', player))
    fn("Fort_04_GAMEPLAY.BP_SCR_LV1L_2230_8", lambda state: state.has('Fort04Left', player) and (state.has(CHARGE, player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has(HORIZONTAL, player))))
    fn("Fort_05_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Fort05Right', player) and state.has(LEDGE, player))
    fn("Fort_05_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Fort05Bottom2', player) and (state.has(LEDGE, player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player))))
    fn("Fort_05_GAMEPLAY.BP_SCR_LV1S_2020_6", lambda state: state.has('Fort05Bottom2', player) and state.has(LEDGE, player) and state.has('Aptitude.pound_attack', player) or state.has('Fort05Bottom1', player))
    fn("Fort_06_GAMEPLAY.BP_SCR_LV1M_2190_4", lambda state: state.has('Fort06Right', player) and (state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player)))
    fn("Fort_07_GAMEPLAY.BP_SCR_LV1S_2021_1", lambda state: state.has('Fort07Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Fort_08_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort08Left', player))
    fn("Fort_09_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort09Left', player))
    fn("Fort_09_GAMEPLAY.BP_Interactable_Passive_dmgcut_Lv3_2", lambda state: state.has('Fort09Left', player) and state.has(CHARGE, player))
    fn("Fort_09_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Fort09Top1', player))
    fn("Fort_09_GAMEPLAY.BP_SCR_LV2M_2190_3", lambda state: state.has('Fort09Top2', player))
    fn("Fort_10_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Fort_10_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player))
    fn("Fort_10_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort10Right', player) or state.has('Fort10Top', player))
    fn("Fort_11_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Aptitude.pound_attack', player) and state.has('Aptitude.dive', player) and (state.has('Fort_11_GAMEPLAY.BP_SCR_LV1M_2190_4', player) or state.has('Fort11Bottom', player) and (state.has(LEDGE, player) and (state.has('sinner', player) or state.has('Aptitude.Dodge', player) and state.has('Aptitude.wallgrab', player)) or state.has(TWO_LEDGE, player))))
    fn("Fort_11_GAMEPLAY.BP_SCR_LV1M_2190_4", lambda state: state.has('Fort11Top2', player) or state.has('Fort11Bottom', player) and (state.has(LEDGE, player) and (state.has('sinner', player) or state.has('Aptitude.Dodge', player) and state.has('Aptitude.wallgrab', player)) or state.has(TWO_LEDGE, player)) and (state.has('Aptitude.Hook', player) or state.has(TWO_LEDGE, player) and state.has('Aptitude.wallgrab', player) or state.has(THREE_LEDGE, player)))
    fn("Fort_12_GAMEPLAY.BP_e2232_Dragon", lambda state: state.has('Fort_12_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_7', player) and state.has(CHARGE, player))
    fn("Fort_12_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_7", lambda state: state.has('Fort12Top', player) or state.has('Fort12Right', player) and (state.has('Aptitude.wallgrab', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_LEDGE, player)) or state.has(THREE_LEDGE, player)))
    fn("Fort_13_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Fort13Left', player))
    fn("Fort_13_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Fort13Bottom1', player) and state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player) or state.has('Fort13Top', player))
    fn("Fort_14_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort14Right', player) and state.has('Aptitude.Hook', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.door_unlock', player) and state.has('Aptitude.dive', player))
    fn("Fort_14_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Fort14Right', player) and state.has('Aptitude.Hook', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.door_unlock', player) and state.has('Aptitude.dive', player))
    fn("Fort_14_GAMEPLAY.BP_SCR_LV1L_2231_2", lambda state: state.has('Fort14Bottom', player) and state.has(CHARGE, player))
    fn("Fort_14_GAMEPLAY.BP_SCR_LV1LL_0000_2", lambda state: state.has('Fort14Right', player) and state.has('Aptitude.Hook', player) and state.has('Aptitude.pound_attack', player) and state.has('Aptitude.door_unlock', player) and state.has('Aptitude.dive', player))
    fn("Fort_14_GAMEPLAY.BP_SCR_LV2S_2020_3", lambda state: state.has('Fort14Right', player) or state.has('Fort14Left', player) or state.has('Fort14Bottom', player))
    fn("Fort_15_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort15Right2', player))
    fn("Fort_15_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Fort15Top', player) and (state.has('Aptitude.Hook', player) or state.has(TWO_LEDGE, player)))
    fn("Fort_15_GAMEPLAY.BP_SCR_LV1M_2190_2", lambda state: state.has('Fort15Right2', player) and state.has('Aptitude.wallgrab', player) or state.has('Fort15Top', player) or state.has('Fort15Bottom', player))
    fn("Fort_15_GAMEPLAY.BP_SCR_LV1S_2021_1", lambda state: state.has('Fort15Right2', player) and state.has(LEDGE, player))
    fn("Fort_16_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort16Left1', player) or state.has('Fort16Top', player) or state.has('Fort16Left2', player) or state.has('Fort16Right', player))
    fn("Fort_17_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Fort17Bottom', player))
    fn("Fort_18_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_Treasure_2", lambda state: state.has('Fort18Right', player) and (state.has('Aptitude.wallgrab', player) and (state.has('sinner', player) or state.has('Aptitude.Dodge', player) and state.has(LEDGE, player) or state.has(TWO_LEDGE, player) or state.has('Aptitude.double_jump', player) and state.has('Aptitude.dash', player))))
    fn("Fort_18_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Fort18Bottom', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Fort_19_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Fort19Top', player))
    fn("Fort_19_GAMEPLAY.BP_SCR_LV2M_2190_4", lambda state: state.has('Fort19Top', player) and state.has('Aptitude.wallgrab', player))
    fn("Fort_19_GAMEPLAY.BP_SCR_LV2S_2021_2", lambda state: state.has('Fort19Left', player) and state.has('Aptitude.pound_attack', player))
    fn("MourningHall", lambda state: state.has('Fort20Bottom', player) or state.has('Fort20Top', player))
    fn("Fort_21_GAMEPLAY.BP_e5070_Killer", lambda state: state.has('Fort21Bottom', player))
    fn("Fort_21_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Fort_21_GAMEPLAY.BP_e5070_Killer', player) and (state.has('Aptitude.wallgrab', player) or (state.has('silva', player) and state.has('Aptitude.double_jump', player) and (state.has('champion', player) or state.has('Aptitude.Dodge', player)))))
    fn("Fort_21_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Fort_21_GAMEPLAY.BP_e5070_Killer', player) and (state.has('Aptitude.wallgrab', player) or (state.has('silva', player) and state.has('Aptitude.double_jump', player) and (state.has('champion', player) or state.has('Aptitude.Dodge', player)))))
    fn("Oubliette_01_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_5", lambda state: state.has('Oubliette01Left', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_01_GAMEPLAY.BP_SCR_LV1S_2010_3", lambda state: state.has('Oubliette01Left', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_02_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette02Left', player) or state.has('Oubliette02Right1', player) or state.has('Oubliette02Right2', player))
    fn("Oubliette_03_GAMEPLAY.BP_SCR_LV1M_2050_2", lambda state: state.has('Oubliette03Left', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_03_GAMEPLAY.BP_SCR_LV1S_2081_2", lambda state: state.has('Oubliette03Left', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_03_GEO.BP_SCR_LV1LL_0000_2", lambda state: state.has('Oubliette03Right', player) and state.has(CHARGE, player))
    fn("Oubliette_04_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Oubliette04Left', player) and (state.has(FULLSILVA, player) or state.has('Aptitude.Hook', player) or state.has(THREE_LEDGE, player) or state.has('sinner', player) and state.has('silva', player) and state.has('Aptitude.double_jump', player) or state.has('silva', player) and state.has('champion', player) and state.has('Aptitude.Dodge', player) or state.has(TWO_HORIZONTAL, player) and state.has('Aptitude.dash', player) and state.has(LEDGE, player) or state.has('Aptitude.double_jump', player) and state.has('champion', player) and state.has(HORIZONTAL, player)))
    fn("Oubliette_04_GAMEPLAY.BP_SCR_LV2S_2010_3", lambda state: state.has('Oubliette04Right', player) or state.has('Oubliette04Left', player))
    fn("Oubliette_05_1_GAMEPLAY.BP_SCR_LV2S_2021_2", lambda state: state.has('Oubliette051Bottom', player))
    fn("Oubliette_05_2_GAMEPLAY.BP_SCR_LV1S_2010_3", lambda state: state.has('Oubliette052Bottom1', player) and (state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) and state.has('Aptitude.Hook', player)))
    fn("Oubliette_05_3_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Oubliette053Top', player))
    fn("Oubliette_05_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_2", lambda state: state.has('Oubliette05Top4', player))
    fn("Oubliette_05_GAMEPLAY.BP_SCR_LV1L_2220_3", lambda state: state.has('Oubliette05Top1', player) and state.has(CHARGE, player))
    fn("Oubliette_05_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Oubliette05Top4', player))
    fn("Oubliette_06_1_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette061Left', player))
    fn("Oubliette_06_2_GAMEPLAY.BP_Interactable_Passive_dmgup_maxHP_2", lambda state: state.has('Oubliette062Bottom2', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_06_3_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Oubliette063Left1', player))
    fn("Oubliette_06_4_GAMEPLAY.BP_Interactable_Item_FinalPassivePart_2", lambda state: state.has('Oubliette064Top', player))
    fn("Oubliette_06_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Oubliette06Bottom', player))
    fn("Oubliette_06_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Oubliette06Bottom', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette_06_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Oubliette06Bottom', player))
    fn("Oubliette_07_1_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette071Top', player))
    fn("Oubliette_07_2_GAMEPLAY.BP_e2072_Mimic", lambda state: state.has('Oubliette072Bottom', player))
    fn("Oubliette_08_GAMEPLAY.BP_SCR_LV2M_2050_3", lambda state: state.has('Aptitude.pound_attack', player) and (state.has('Oubliette08Top', player) or state.has('Oubliette08Right', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player))))
    fn("Oubliette_08_GAMEPLAY.BP_SCR_LV2S_2081_2", lambda state: state.has('Oubliette08Left', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette_09_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Oubliette09Top', player) and state.has('Aptitude.wallgrab', player))
    fn("Oubliette_09_GAMEPLAY.BP_Interactable_Item_MaxHPUp_5", lambda state: state.has('Oubliette09Top', player) and state.has('Aptitude.wallgrab', player))
    fn("Oubliette_09_GAMEPLAY.BP_SCR_LV1M_2050_2", lambda state: state.has('Oubliette09Top', player) and state.has('Aptitude.dive', player))
    fn("Oubliette_10_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette10Left1', player) or state.has('Oubliette10Right', player) or state.has('Oubliette10Left2', player) or state.has('Oubliette10Top', player))
    fn("Oubliette_11_GAMEPLAY.BP_SCR_LV2S_2020_2", lambda state: state.has('Oubliette11Left1', player) and (state.has(LEDGE, player) or state.has('Aptitude.dash', player) or state.has(HORIZONTAL, player) or state.has('Aptitude.Hook', player)) or state.has('Oubliette11Left2', player) and state.has('Aptitude.Hook', player))
    fn("Oubliette_12_GAMEPLAY.BP_e2182_Shadow", lambda state: state.has('Oubliette12Left', player))
    fn("Oubliette_13_1_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Oubliette131Bottom', player))
    fn("Oubliette_13_2_GAMEPLAY.BP_SCR_LV3S_5000_1", lambda state: state.has('Oubliette132Top', player))
    fn("Oubliette_13_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Oubliette13Right', player) and (state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player) or state.has(TWO_LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Oubliette_13_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette13Left', player))
    fn("Oubliette_13_GAMEPLAY.BP_SCR_LV1M_2001_3", lambda state: state.has('Oubliette13Left', player))
    fn("Oubliette_13_GAMEPLAY.BP_SCR_LV1M_2180_2", lambda state: state.has('Oubliette13Left', player) and state.has(CHARGE, player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.Hook', player) or state.has('Aptitude.dash', player) or state.has('Aptitude.wallgrab', player)))
    fn("Oubliette_14_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Oubliette14Left', player) or state.has('Oubliette14Right', player))
    fn("Oubliette_15_GAMEPLAY.BP_e5060_Assassin", lambda state: state.has('Oubliette15Left', player) or state.has('Oubliette15Right', player))
    fn("Oubliette_16_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Oubliette16Right', player))
    fn("Oubliette_16_GAMEPLAY.BP_SCR_LV1L_2180_3", lambda state: state.has('Oubliette16Left', player))
    fn("Outside_03_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Outside03Right', player) and (state.has('Aptitude.wallgrab', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has('champion', player))))
    fn("Outside_03_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Outside_03_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Outside_03_GAMEPLAY.BP_Interactable_Passive_ShortHeal_2", lambda state: state.has('Outside03Right', player) and state.has('Aptitude.dive', player))
    fn("Outside_03_GAMEPLAY.BP_SCR_LV2L_2230_2", lambda state: state.has('Outside_03_GAMEPLAY.BP_Interactable_Item_Tip3', player))
    fn("Swamp_04_GAMEPLAY.BP_e2172_Inferior", lambda state: state.has('Swamp04Bottom', player) and state.has('Aptitude.door_unlock', player))
    fn("Swamp_04_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Swamp04Left', player))
    fn("Swamp_05_GAMEPLAY.BP_SCR_LV2M_2171_2", lambda state: state.has('Swamp05Left', player) and state.has('Aptitude.dive', player))
    fn("Swamp_05_GEO.BP_SCR_LV1M_2051_2", lambda state: state.has('Swamp05Left', player) and state.has('Aptitude.dive', player))
    fn("Swamp_06_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp06Left', player) or state.has('Swamp06Top', player))
    fn("Swamp_06_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Swamp06Top', player))
    fn("Swamp_06_GAMEPLAY.BP_SCR_LV1L_2180_3", lambda state: state.has('Swamp06Top', player))
    fn("Swamp_07_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Swamp07Right', player) and state.has('Aptitude.wallgrab', player))
    fn("Swamp_07_GAMEPLAY.BP_Interactable_Passive_RecastTimeCut_Lv2_2", lambda state: state.has('Swamp07Left', player) and (state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player)))
    fn("Swamp_08_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_2", lambda state: state.has('Swamp08Right2', player) and state.has('Aptitude.dive', player))
    fn("Swamp_08_GAMEPLAY.BP_SCR_LV1M_2051_2", lambda state: state.has('Swamp08Right2', player) and state.has('Aptitude.dive', player))
    fn("Swamp_08_GAMEPLAY.BP_SCR_LV2M_2051_2", lambda state: state.has('Swamp08Right2', player) and state.has('Aptitude.dive', player))
    fn("Swamp_09_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Swamp09Right2', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))
    fn("Swamp_09_GAMEPLAY.BP_SCR_LV2M_2170_2", lambda state: state.has('Swamp09Right1', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_LEDGE, player)))
    fn("Swamp_1_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp1Bottom', player) or state.has('Swamp1Left', player))
    fn("Swamp_10_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp10Right', player))
    fn("Swamp_10_GAMEPLAY.BP_SCR_LV1M_2051_2", lambda state: state.has('Swamp_10_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.dive', player))
    fn("Swamp_11_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Swamp11Left', player) and (state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_HORIZONTAL, player) or state.has('silva', player) and state.has('Aptitude.double_jump', player)))
    fn("Swamp_11_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Swamp11Left', player))
    fn("Swamp_12_GAMEPLAY.BP_Interactable_Item_HealPower_Up_2", lambda state: state.has('Swamp_12_GAMEPLAY.BP_Interactable_Item_Tip3', player) and state.has('Aptitude.pound_attack', player))
    fn("Swamp_12_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp12Left', player) or state.has('Swamp12Bottom', player) or state.has('Swamp12TP', player))
    fn("Swamp_13_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Swamp13Top2', player))
    fn("Swamp_13_GAMEPLAY.BP_SCR_LV1L_2170_3", lambda state: state.has('Swamp13Top1', player) and state.has('Aptitude.pound_attack', player) or state.has('Swamp13Top2', player) and state.has(CHARGE, player) and state.has('Aptitude.pound_attack', player))
    fn("Swamp_13_GAMEPLAY.BP_SCR_LV2L_2170_3", lambda state: state.has('Swamp13Bottom', player) and (state.has('Aptitude.Hook', player) or state.has('Aptitude.wallgrab', player)))
    fn("Swamp_14_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Swamp14Top', player) or state.has('Swamp14Bottom', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)))
    fn("Swamp_14_GAMEPLAY.BP_SCR_LV1L_2170_3", lambda state: state.has('Swamp14Top', player) and (state.has(TWO_LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Swamp_15_GAMEPLAY.BP_e2052_Toad", lambda state: state.has('Swamp15Left', player) and state.has('Aptitude.dive', player) and state.has('Passive.i_passive_ignore_damage_area', player))
    fn("Swamp_15_GAMEPLAY.BP_SCR_LV1M_2171_2", lambda state: state.has('Swamp15Top', player))
    fn("Swamp_16_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp16Top', player) or state.has('Swamp16Left', player))
    fn("Swamp_18_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2', player))
    fn("Swamp_18_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2', player))
    fn("Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2", lambda state: state.has('Swamp18Right', player))
    fn("Swamp_18_GAMEPLAY.BP_SCR_LV1LL_miliel_2", lambda state: state.has('Swamp_18_GAMEPLAY.BP_Interactable_Spirit_s5080_2', player) and (state.has('Aptitude.wallgrab', player) and (state.has(LEDGE, player) and state.has(TWO_HORIZONTAL, player)) or (state.has(TWO_LEDGE, player) and state.has('Aptitude.Dodge', player))))
    fn("Swamp_2_GAMEPLAY.BP_SCR_LV2S_2010_2", lambda state: state.has('Swamp2Top', player))
    fn("Swamp_2_GAMEPLAY.BP_SCR_LV2S_2121_1", lambda state: state.has('Swamp2Top', player) and (state.has('Aptitude.wallgrab', player) or state.has(LEDGE, player) and state.has('Aptitude.Hook', player)))
    fn("Swamp_3_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Swamp3Top', player) and state.has(LEDGE, player))
    fn("Swamp_3_GAMEPLAY.BP_SCR_LV1L_2170_3", lambda state: state.has('Swamp3Top', player))
    fn("Village_02_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_Drop", lambda state: state.has('Village02Left', player))
    fn("Village_02_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Village02Left', player) and (state.has('Aptitude.double_jump', player) and (state.has('silva', player) or state.has('champion', player)) or (state.has('Aptitude.double_jump', player) or state.has('silva', player)) and state.has(HORIZONTAL, player) or state.has('Aptitude.Hook', player)))
    fn("Village_02_GAMEPLAY.BP_SCR_LV1S_2100_2", lambda state: state.has('Village02Left', player) and (state.has(TWO_LEDGE, player) or state.has('silva', player) and state.has('Aptitude.Dodge', player) or state.has('Aptitude.Hook', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player))))
    fn("Village_03_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Aptitude.pound_attack', player) and (state.has('Village03Right', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)) or state.has('Village03Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player))))
    fn("Village_03_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Village03Right', player) and (state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player) or state.has(LEDGE, player) or state.has(HORIZONTAL, player) or state.has('Aptitude.dash', player)))
    fn("Village_03_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Village03Right', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)) or state.has('Village03Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)))
    fn("Village_03_GAMEPLAY.BP_SCR_LV2S_2020_2", lambda state: state.has('Aptitude.pound_attack', player) and (state.has('Village03Right', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)) or state.has('Village03Bottom1', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player))))
    fn("Village_04_1_GAMEPLAY.BP_e2102_Crow", lambda state: state.has('Village041Bottom', player))
    fn("Village_04_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Village04Top', player))
    fn("Village_04_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Village04Right', player) and (state.has('Aptitude.Hook', player) and (state.has(LEDGE, player) or state.has('Aptitude.wallgrab', player)) or state.has(LEDGE, player) and state.has(HORIZONTAL, player) or state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player)))
    fn("Village_04_GAMEPLAY.BP_SCR_LV1S_2010_1", lambda state: state.has('Village04Top', player))
    fn("Village_05_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Village05Top', player) or state.has('Village05Left', player) or state.has('Village05Right', player))
    fn("Village_06_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Village06Left', player))
    fn("Village_06_GAMEPLAY.BP_SCR_LV1M_2000_3", lambda state: state.has('Village06Right2', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) or (state.has('silva', player) or state.has('Aptitude.double_jump', player)) and state.has(HORIZONTAL, player) or state.has('champion', player) and state.has('sinner', player)))
    fn("Village_06_GAMEPLAY.BP_SCR_LV1S_2020_2", lambda state: state.has('Village06Left', player) and state.has('Aptitude.pound_attack', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)))
    fn("Village_06_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Village06Left', player) and state.has('Aptitude.pound_attack', player) and (state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has('Aptitude.wallgrab', player) or state.has('Aptitude.Hook', player)))
    fn("Village_06_GAMEPLAY.BP_SCR_LV2S_2010_3", lambda state: state.has('Village06Left', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Village_06_GAMEPLAY.BP_SCR_LV2S_2021_2", lambda state: state.has('Village06Left', player) and state.has('Aptitude.pound_attack', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Village_07_GAMEPLAY.BP_Interactable_Item_PassiveSlot_2", lambda state: state.has('Village07Left', player))
    fn("Village_07_GAMEPLAY.BP_SCR_LV1S_2100_3", lambda state: state.has('Village07Left', player))
    fn("Village_07_GAMEPLAY.BP_SCR_LV2S_2080_3", lambda state: state.has('Village07Left', player) and (state.has('Aptitude.Hook', player) or state.has(TWO_LEDGE, player)))
    fn("Village_08_GAMEPLAY.BP_e2002_Knight", lambda state: state.has('Village08Left', player))
    fn("Village_08_GAMEPLAY.BP_Interactable_Item_MaxHPUp_01_2", lambda state: state.has('Village08Left', player))
    fn("Village_08_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Village08Left', player) and state.has('Aptitude.dive', player))
    fn("Village_09_GAMEPLAY.BP_Interactable_Item_Tip3", lambda state: state.has('Village_09_GAMEPLAY.BP_Interactable_Item_Tip4', player))
    fn("Village_09_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Village09Right1', player) or state.has('Village09Right2', player) or state.has('Village09Left1', player) or state.has('Village09Left2', player))
    fn("Village_10_GAMEPLAY.BP_e5050_Giant", lambda state: state.has('Village10Left', player) or state.has('Village10Right', player))
    fn("Village_11_1_GAMEPLAY.BP_Interactable_Item_HealPower_Up_5", lambda state: state.has('Village111Bottom', player) and state.has('Aptitude.pound_attack', player))
    fn("Village_11_GAMEPLAY.BP_Interactable_Item_Tip1", lambda state: state.has('Village11Left', player))
    fn("Village_11_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Village11Left', player))
    fn("Village_11_GAMEPLAY.BP_SCR_LV2S_2020_3", lambda state: state.has('Village11Left', player))
    fn("Village_12_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Village12Left1', player))
    fn("Village_13_GAMEPLAY.BP_Interactable_Item_MaxHPUp_02_Treasure_2", lambda state: state.has('Village13Right', player) and (state.has('Aptitude.double_jump', player) or state.has(TWO_LEDGE, player) or state.has(LEDGE, player) and state.has(HORIZONTAL, player)))
    fn("Village_13_GAMEPLAY.BP_Interactable_Item_PassiveSlot_Drop", lambda state: state.has('Village13Right', player))
    fn("Village_13_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Village13Left', player) and state.has('Aptitude.dive', player))
    fn("Village_13_GAMEPLAY.BP_SCR_LV1S_2021_2", lambda state: state.has('Village13Left', player))
    fn("Village_14_GAMEPLAY.BP_e2112_Ork", lambda state: state.has('Village14Bottom', player) and (state.has(LEDGE, player) or state.has('Aptitude.Hook', player)))
    fn("Village_14_GAMEPLAY.BP_SCR_LV1L_2111_2", lambda state: state.has('Village_14_GAMEPLAY.BP_e2112_Ork', player) and (state.has('Aptitude.pound_attack', player) and (state.has('Aptitude.Hook', player) or state.has(LEDGE, player) and state.has('sinner', player) or state.has('silva', player) and (state.has('Aptitude.double_jump', player) or state.has('Aptitude.Dodge', player)) or state.has('champion', player) and (state.has('Aptitude.dash', player) or state.has('Aptitude.wallgrab', player)) and (state.has('silva', player) or state.has('Aptitude.double_jump', player)))))
    fn("Village_14_GAMEPLAY.BP_SCR_LV2L_2110_3", lambda state: state.has('Village_14_GAMEPLAY.BP_e2112_Ork', player) and (state.has('Aptitude.pound_attack', player) and (state.has('Aptitude.Hook', player) or state.has(THREE_LEDGE, player) or state.has(FULLSILVA, player) or state.has('Aptitude.wallgrab', player) and state.has(LEDGE, player))))
    fn("Village_15_GAMEPLAY.BP_SCR_LV1LL_0000_2", lambda state: state.has('Village15Left', player) and state.has('Aptitude.dive', player) and (state.has('Aptitude.wallgrab', player) and (state.has('sinner', player) and (state.has('Aptitude.double_jump', player) or state.has('champion', player)) or state.has('Aptitude.Dodge', player) and state.has('silva', player) or state.has(TWO_LEDGE, player) and state.has(HORIZONTAL, player)) or state.has('Aptitude.Hook', player) and (state.has(TWO_LEDGE, player) or state.has('Aptitude.wallgrab', player) and (state.has(LEDGE, player) or state.has(HORIZONTAL, player)))) or state.has('Village15Right', player) and state.has('Aptitude.wallgrab', player) and state.has('Aptitude.double_jump', player) and state.has('silva', player))
    fn("Village_15_GAMEPLAY.BP_SCR_LV1M_2050_3", lambda state: state.has('Village15Right', player) and state.has('Aptitude.dive', player))
    fn("Village_15_GAMEPLAY.BP_SCR_LV2M_2050_2", lambda state: state.has('Village15Left', player) and state.has('Aptitude.dive', player))
    fn("Village_16_GAMEPLAY.BP_Interactable_Item_Tip4", lambda state: state.has('Village16Right', player))
    fn("Village_16_GAMEPLAY.BP_Interactable_Passives_Treasure_2", lambda state: state.has('Village16Right', player))
    
